
013Blyksatorius.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002054  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  080021dc  080021dc  000121dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002290  08002290  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08002290  08002290  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002290  08002290  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002290  08002290  00012290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002294  08002294  00012294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08002298  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          00000170  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001cc  200001cc  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020086  2**0
                  CONTENTS, READONLY
 14 .debug_info   00001f3d  00000000  00000000  000200c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000548  00000000  00000000  00022006  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000002b0  00000000  00000000  00022550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000001f5  00000000  00000000  00022800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00002da5  00000000  00000000  000229f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00001f97  00000000  00000000  0002579a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0000a1fb  00000000  00000000  00027731  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000011c8  00000000  00000000  0003192c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000078  00000000  00000000  00032af4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000005c 	.word	0x2000005c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080021c4 	.word	0x080021c4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000060 	.word	0x20000060
 80001c4:	080021c4 	.word	0x080021c4

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <dit_delay>:
#ifndef FLASHER_H_
#define FLASHER_H_

#include "main.h"

void dit_delay(){
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
	for(uint32_t i = 1; i <= DIT_CYCLE; i++);
 80001de:	2301      	movs	r3, #1
 80001e0:	607b      	str	r3, [r7, #4]
 80001e2:	e002      	b.n	80001ea <dit_delay+0x12>
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	3301      	adds	r3, #1
 80001e8:	607b      	str	r3, [r7, #4]
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	4a04      	ldr	r2, [pc, #16]	; (8000200 <dit_delay+0x28>)
 80001ee:	4293      	cmp	r3, r2
 80001f0:	d9f8      	bls.n	80001e4 <dit_delay+0xc>
}
 80001f2:	bf00      	nop
 80001f4:	bf00      	nop
 80001f6:	370c      	adds	r7, #12
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bc80      	pop	{r7}
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	0003d090 	.word	0x0003d090

08000204 <dah_delay>:
void dah_delay(){
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
	for(uint32_t i = 1; i <= DAH_CYCLE; i++);
 800020a:	2301      	movs	r3, #1
 800020c:	607b      	str	r3, [r7, #4]
 800020e:	e002      	b.n	8000216 <dah_delay+0x12>
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	3301      	adds	r3, #1
 8000214:	607b      	str	r3, [r7, #4]
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	4a04      	ldr	r2, [pc, #16]	; (800022c <dah_delay+0x28>)
 800021a:	4293      	cmp	r3, r2
 800021c:	d9f8      	bls.n	8000210 <dah_delay+0xc>
}
 800021e:	bf00      	nop
 8000220:	bf00      	nop
 8000222:	370c      	adds	r7, #12
 8000224:	46bd      	mov	sp, r7
 8000226:	bc80      	pop	{r7}
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	000b71b0 	.word	0x000b71b0

08000230 <word_delay>:
void word_delay(){
 8000230:	b480      	push	{r7}
 8000232:	b083      	sub	sp, #12
 8000234:	af00      	add	r7, sp, #0
	for(uint32_t i = 1; i <= WORD_CYCLE; i++);
 8000236:	2301      	movs	r3, #1
 8000238:	607b      	str	r3, [r7, #4]
 800023a:	e002      	b.n	8000242 <word_delay+0x12>
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	3301      	adds	r3, #1
 8000240:	607b      	str	r3, [r7, #4]
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	4a04      	ldr	r2, [pc, #16]	; (8000258 <word_delay+0x28>)
 8000246:	4293      	cmp	r3, r2
 8000248:	d9f8      	bls.n	800023c <word_delay+0xc>
}
 800024a:	bf00      	nop
 800024c:	bf00      	nop
 800024e:	370c      	adds	r7, #12
 8000250:	46bd      	mov	sp, r7
 8000252:	bc80      	pop	{r7}
 8000254:	4770      	bx	lr
 8000256:	bf00      	nop
 8000258:	000f4240 	.word	0x000f4240

0800025c <dit>:
void dit(GPIOx_ODR *pGpiodOutReg){
 800025c:	b480      	push	{r7}
 800025e:	b085      	sub	sp, #20
 8000260:	af00      	add	r7, sp, #0
 8000262:	6078      	str	r0, [r7, #4]
	pGpiodOutReg->odr_12 = 1;
 8000264:	687a      	ldr	r2, [r7, #4]
 8000266:	7853      	ldrb	r3, [r2, #1]
 8000268:	f043 0310 	orr.w	r3, r3, #16
 800026c:	7053      	strb	r3, [r2, #1]
	for(uint32_t i = 1; i <= DIT_CYCLE; i++);
 800026e:	2301      	movs	r3, #1
 8000270:	60fb      	str	r3, [r7, #12]
 8000272:	e002      	b.n	800027a <dit+0x1e>
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	3301      	adds	r3, #1
 8000278:	60fb      	str	r3, [r7, #12]
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	4a06      	ldr	r2, [pc, #24]	; (8000298 <dit+0x3c>)
 800027e:	4293      	cmp	r3, r2
 8000280:	d9f8      	bls.n	8000274 <dit+0x18>
	pGpiodOutReg->odr_12 = 0;
 8000282:	687a      	ldr	r2, [r7, #4]
 8000284:	7853      	ldrb	r3, [r2, #1]
 8000286:	f36f 1304 	bfc	r3, #4, #1
 800028a:	7053      	strb	r3, [r2, #1]
}
 800028c:	bf00      	nop
 800028e:	3714      	adds	r7, #20
 8000290:	46bd      	mov	sp, r7
 8000292:	bc80      	pop	{r7}
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	0003d090 	.word	0x0003d090

0800029c <dah>:
void dah(GPIOx_ODR *pGpiodOutReg){
 800029c:	b480      	push	{r7}
 800029e:	b085      	sub	sp, #20
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
	pGpiodOutReg->odr_12 = 1;
 80002a4:	687a      	ldr	r2, [r7, #4]
 80002a6:	7853      	ldrb	r3, [r2, #1]
 80002a8:	f043 0310 	orr.w	r3, r3, #16
 80002ac:	7053      	strb	r3, [r2, #1]
	for(uint32_t i = 1; i <= DAH_CYCLE; i++);
 80002ae:	2301      	movs	r3, #1
 80002b0:	60fb      	str	r3, [r7, #12]
 80002b2:	e002      	b.n	80002ba <dah+0x1e>
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	3301      	adds	r3, #1
 80002b8:	60fb      	str	r3, [r7, #12]
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	4a06      	ldr	r2, [pc, #24]	; (80002d8 <dah+0x3c>)
 80002be:	4293      	cmp	r3, r2
 80002c0:	d9f8      	bls.n	80002b4 <dah+0x18>
	pGpiodOutReg->odr_12 = 0;
 80002c2:	687a      	ldr	r2, [r7, #4]
 80002c4:	7853      	ldrb	r3, [r2, #1]
 80002c6:	f36f 1304 	bfc	r3, #4, #1
 80002ca:	7053      	strb	r3, [r2, #1]
}
 80002cc:	bf00      	nop
 80002ce:	3714      	adds	r7, #20
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bc80      	pop	{r7}
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	000b71b0 	.word	0x000b71b0

080002dc <blue_dah>:
void blue_dah(GPIOx_ODR volatile *pGpiodOutReg){
 80002dc:	b480      	push	{r7}
 80002de:	b085      	sub	sp, #20
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
	pGpiodOutReg->odr_15 = 1;
 80002e4:	687a      	ldr	r2, [r7, #4]
 80002e6:	6813      	ldr	r3, [r2, #0]
 80002e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80002ec:	6013      	str	r3, [r2, #0]
	for(uint32_t i = 1; i <= DAH_CYCLE; i++);
 80002ee:	2301      	movs	r3, #1
 80002f0:	60fb      	str	r3, [r7, #12]
 80002f2:	e002      	b.n	80002fa <blue_dah+0x1e>
 80002f4:	68fb      	ldr	r3, [r7, #12]
 80002f6:	3301      	adds	r3, #1
 80002f8:	60fb      	str	r3, [r7, #12]
 80002fa:	68fb      	ldr	r3, [r7, #12]
 80002fc:	4a06      	ldr	r2, [pc, #24]	; (8000318 <blue_dah+0x3c>)
 80002fe:	4293      	cmp	r3, r2
 8000300:	d9f8      	bls.n	80002f4 <blue_dah+0x18>
	pGpiodOutReg->odr_15 = 0;
 8000302:	687a      	ldr	r2, [r7, #4]
 8000304:	6813      	ldr	r3, [r2, #0]
 8000306:	f36f 33cf 	bfc	r3, #15, #1
 800030a:	6013      	str	r3, [r2, #0]
}
 800030c:	bf00      	nop
 800030e:	3714      	adds	r7, #20
 8000310:	46bd      	mov	sp, r7
 8000312:	bc80      	pop	{r7}
 8000314:	4770      	bx	lr
 8000316:	bf00      	nop
 8000318:	000b71b0 	.word	0x000b71b0

0800031c <err_flash>:
void err_flash(GPIOx_ODR *pGpiodOutReg){
 800031c:	b480      	push	{r7}
 800031e:	b087      	sub	sp, #28
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
		pGpiodOutReg->odr_12 = 1;
 8000324:	687a      	ldr	r2, [r7, #4]
 8000326:	7853      	ldrb	r3, [r2, #1]
 8000328:	f043 0310 	orr.w	r3, r3, #16
 800032c:	7053      	strb	r3, [r2, #1]
		for(uint32_t i = 1; i <= ERROR_CYCLE; i++);
 800032e:	2301      	movs	r3, #1
 8000330:	617b      	str	r3, [r7, #20]
 8000332:	e002      	b.n	800033a <err_flash+0x1e>
 8000334:	697b      	ldr	r3, [r7, #20]
 8000336:	3301      	adds	r3, #1
 8000338:	617b      	str	r3, [r7, #20]
 800033a:	697b      	ldr	r3, [r7, #20]
 800033c:	4a24      	ldr	r2, [pc, #144]	; (80003d0 <err_flash+0xb4>)
 800033e:	4293      	cmp	r3, r2
 8000340:	d9f8      	bls.n	8000334 <err_flash+0x18>
		pGpiodOutReg->odr_12 = 0;
 8000342:	687a      	ldr	r2, [r7, #4]
 8000344:	7853      	ldrb	r3, [r2, #1]
 8000346:	f36f 1304 	bfc	r3, #4, #1
 800034a:	7053      	strb	r3, [r2, #1]
		pGpiodOutReg->odr_13 = 1;
 800034c:	687a      	ldr	r2, [r7, #4]
 800034e:	7853      	ldrb	r3, [r2, #1]
 8000350:	f043 0320 	orr.w	r3, r3, #32
 8000354:	7053      	strb	r3, [r2, #1]
		for(uint32_t i = 1; i <= ERROR_CYCLE; i++);
 8000356:	2301      	movs	r3, #1
 8000358:	613b      	str	r3, [r7, #16]
 800035a:	e002      	b.n	8000362 <err_flash+0x46>
 800035c:	693b      	ldr	r3, [r7, #16]
 800035e:	3301      	adds	r3, #1
 8000360:	613b      	str	r3, [r7, #16]
 8000362:	693b      	ldr	r3, [r7, #16]
 8000364:	4a1a      	ldr	r2, [pc, #104]	; (80003d0 <err_flash+0xb4>)
 8000366:	4293      	cmp	r3, r2
 8000368:	d9f8      	bls.n	800035c <err_flash+0x40>
		pGpiodOutReg->odr_13 = 0;
 800036a:	687a      	ldr	r2, [r7, #4]
 800036c:	7853      	ldrb	r3, [r2, #1]
 800036e:	f36f 1345 	bfc	r3, #5, #1
 8000372:	7053      	strb	r3, [r2, #1]
		pGpiodOutReg->odr_14 = 1;
 8000374:	687a      	ldr	r2, [r7, #4]
 8000376:	7853      	ldrb	r3, [r2, #1]
 8000378:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800037c:	7053      	strb	r3, [r2, #1]
		for(uint32_t i = 1; i <= ERROR_CYCLE; i++);
 800037e:	2301      	movs	r3, #1
 8000380:	60fb      	str	r3, [r7, #12]
 8000382:	e002      	b.n	800038a <err_flash+0x6e>
 8000384:	68fb      	ldr	r3, [r7, #12]
 8000386:	3301      	adds	r3, #1
 8000388:	60fb      	str	r3, [r7, #12]
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	4a10      	ldr	r2, [pc, #64]	; (80003d0 <err_flash+0xb4>)
 800038e:	4293      	cmp	r3, r2
 8000390:	d9f8      	bls.n	8000384 <err_flash+0x68>
		pGpiodOutReg->odr_14= 0;
 8000392:	687a      	ldr	r2, [r7, #4]
 8000394:	7853      	ldrb	r3, [r2, #1]
 8000396:	f36f 1386 	bfc	r3, #6, #1
 800039a:	7053      	strb	r3, [r2, #1]
		pGpiodOutReg->odr_15 = 1;
 800039c:	687a      	ldr	r2, [r7, #4]
 800039e:	7853      	ldrb	r3, [r2, #1]
 80003a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003a4:	7053      	strb	r3, [r2, #1]
		for(uint32_t i = 1; i <= ERROR_CYCLE; i++);
 80003a6:	2301      	movs	r3, #1
 80003a8:	60bb      	str	r3, [r7, #8]
 80003aa:	e002      	b.n	80003b2 <err_flash+0x96>
 80003ac:	68bb      	ldr	r3, [r7, #8]
 80003ae:	3301      	adds	r3, #1
 80003b0:	60bb      	str	r3, [r7, #8]
 80003b2:	68bb      	ldr	r3, [r7, #8]
 80003b4:	4a06      	ldr	r2, [pc, #24]	; (80003d0 <err_flash+0xb4>)
 80003b6:	4293      	cmp	r3, r2
 80003b8:	d9f8      	bls.n	80003ac <err_flash+0x90>
		pGpiodOutReg->odr_15 = 0;
 80003ba:	687a      	ldr	r2, [r7, #4]
 80003bc:	7853      	ldrb	r3, [r2, #1]
 80003be:	f36f 13c7 	bfc	r3, #7, #1
 80003c2:	7053      	strb	r3, [r2, #1]
}
 80003c4:	bf00      	nop
 80003c6:	371c      	adds	r7, #28
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bc80      	pop	{r7}
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop
 80003d0:	000186a0 	.word	0x000186a0

080003d4 <reset_flash>:
void reset_flash(GPIOx_ODR *pGpiodOutReg){
 80003d4:	b480      	push	{r7}
 80003d6:	b089      	sub	sp, #36	; 0x24
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
		pGpiodOutReg->odr_14 = 1;
 80003dc:	687a      	ldr	r2, [r7, #4]
 80003de:	7853      	ldrb	r3, [r2, #1]
 80003e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003e4:	7053      	strb	r3, [r2, #1]
		for(uint32_t i = 1; i <= ERROR_CYCLE; i++);
 80003e6:	2301      	movs	r3, #1
 80003e8:	61fb      	str	r3, [r7, #28]
 80003ea:	e002      	b.n	80003f2 <reset_flash+0x1e>
 80003ec:	69fb      	ldr	r3, [r7, #28]
 80003ee:	3301      	adds	r3, #1
 80003f0:	61fb      	str	r3, [r7, #28]
 80003f2:	69fb      	ldr	r3, [r7, #28]
 80003f4:	4a29      	ldr	r2, [pc, #164]	; (800049c <reset_flash+0xc8>)
 80003f6:	4293      	cmp	r3, r2
 80003f8:	d9f8      	bls.n	80003ec <reset_flash+0x18>
		pGpiodOutReg->odr_14= 0;
 80003fa:	687a      	ldr	r2, [r7, #4]
 80003fc:	7853      	ldrb	r3, [r2, #1]
 80003fe:	f36f 1386 	bfc	r3, #6, #1
 8000402:	7053      	strb	r3, [r2, #1]
		for(uint32_t i = 1; i <= ERROR_CYCLE; i++);
 8000404:	2301      	movs	r3, #1
 8000406:	61bb      	str	r3, [r7, #24]
 8000408:	e002      	b.n	8000410 <reset_flash+0x3c>
 800040a:	69bb      	ldr	r3, [r7, #24]
 800040c:	3301      	adds	r3, #1
 800040e:	61bb      	str	r3, [r7, #24]
 8000410:	69bb      	ldr	r3, [r7, #24]
 8000412:	4a22      	ldr	r2, [pc, #136]	; (800049c <reset_flash+0xc8>)
 8000414:	4293      	cmp	r3, r2
 8000416:	d9f8      	bls.n	800040a <reset_flash+0x36>
		pGpiodOutReg->odr_14 = 1;
 8000418:	687a      	ldr	r2, [r7, #4]
 800041a:	7853      	ldrb	r3, [r2, #1]
 800041c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000420:	7053      	strb	r3, [r2, #1]
		for(uint32_t i = 1; i <= ERROR_CYCLE; i++);
 8000422:	2301      	movs	r3, #1
 8000424:	617b      	str	r3, [r7, #20]
 8000426:	e002      	b.n	800042e <reset_flash+0x5a>
 8000428:	697b      	ldr	r3, [r7, #20]
 800042a:	3301      	adds	r3, #1
 800042c:	617b      	str	r3, [r7, #20]
 800042e:	697b      	ldr	r3, [r7, #20]
 8000430:	4a1a      	ldr	r2, [pc, #104]	; (800049c <reset_flash+0xc8>)
 8000432:	4293      	cmp	r3, r2
 8000434:	d9f8      	bls.n	8000428 <reset_flash+0x54>
		pGpiodOutReg->odr_14= 0;
 8000436:	687a      	ldr	r2, [r7, #4]
 8000438:	7853      	ldrb	r3, [r2, #1]
 800043a:	f36f 1386 	bfc	r3, #6, #1
 800043e:	7053      	strb	r3, [r2, #1]
		for(uint32_t i = 1; i <= ERROR_CYCLE; i++);
 8000440:	2301      	movs	r3, #1
 8000442:	613b      	str	r3, [r7, #16]
 8000444:	e002      	b.n	800044c <reset_flash+0x78>
 8000446:	693b      	ldr	r3, [r7, #16]
 8000448:	3301      	adds	r3, #1
 800044a:	613b      	str	r3, [r7, #16]
 800044c:	693b      	ldr	r3, [r7, #16]
 800044e:	4a13      	ldr	r2, [pc, #76]	; (800049c <reset_flash+0xc8>)
 8000450:	4293      	cmp	r3, r2
 8000452:	d9f8      	bls.n	8000446 <reset_flash+0x72>
		pGpiodOutReg->odr_14 = 1;
 8000454:	687a      	ldr	r2, [r7, #4]
 8000456:	7853      	ldrb	r3, [r2, #1]
 8000458:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800045c:	7053      	strb	r3, [r2, #1]
		for(uint32_t i = 1; i <= ERROR_CYCLE; i++);
 800045e:	2301      	movs	r3, #1
 8000460:	60fb      	str	r3, [r7, #12]
 8000462:	e002      	b.n	800046a <reset_flash+0x96>
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	3301      	adds	r3, #1
 8000468:	60fb      	str	r3, [r7, #12]
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	4a0b      	ldr	r2, [pc, #44]	; (800049c <reset_flash+0xc8>)
 800046e:	4293      	cmp	r3, r2
 8000470:	d9f8      	bls.n	8000464 <reset_flash+0x90>
		pGpiodOutReg->odr_14= 0;
 8000472:	687a      	ldr	r2, [r7, #4]
 8000474:	7853      	ldrb	r3, [r2, #1]
 8000476:	f36f 1386 	bfc	r3, #6, #1
 800047a:	7053      	strb	r3, [r2, #1]
		for(uint32_t i = 1; i <= ERROR_CYCLE; i++);
 800047c:	2301      	movs	r3, #1
 800047e:	60bb      	str	r3, [r7, #8]
 8000480:	e002      	b.n	8000488 <reset_flash+0xb4>
 8000482:	68bb      	ldr	r3, [r7, #8]
 8000484:	3301      	adds	r3, #1
 8000486:	60bb      	str	r3, [r7, #8]
 8000488:	68bb      	ldr	r3, [r7, #8]
 800048a:	4a04      	ldr	r2, [pc, #16]	; (800049c <reset_flash+0xc8>)
 800048c:	4293      	cmp	r3, r2
 800048e:	d9f8      	bls.n	8000482 <reset_flash+0xae>
}
 8000490:	bf00      	nop
 8000492:	bf00      	nop
 8000494:	3724      	adds	r7, #36	; 0x24
 8000496:	46bd      	mov	sp, r7
 8000498:	bc80      	pop	{r7}
 800049a:	4770      	bx	lr
 800049c:	000186a0 	.word	0x000186a0

080004a0 <flash_A>:
#ifndef FLASH_ALPHABET_H_
#define FLASH_ALPHABET_H_

#include "flasher.h"

void flash_A(GPIOx_ODR *pGpiodOutReg){
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
	dit(pGpiodOutReg);
 80004a8:	6878      	ldr	r0, [r7, #4]
 80004aa:	f7ff fed7 	bl	800025c <dit>
	dit_delay();
 80004ae:	f7ff fe93 	bl	80001d8 <dit_delay>
	dah(pGpiodOutReg);
 80004b2:	6878      	ldr	r0, [r7, #4]
 80004b4:	f7ff fef2 	bl	800029c <dah>
	dah_delay();
 80004b8:	f7ff fea4 	bl	8000204 <dah_delay>
}
 80004bc:	bf00      	nop
 80004be:	3708      	adds	r7, #8
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}

080004c4 <flash_B>:
void flash_B(GPIOx_ODR *pGpiodOutReg){
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
	dah(pGpiodOutReg);
 80004cc:	6878      	ldr	r0, [r7, #4]
 80004ce:	f7ff fee5 	bl	800029c <dah>
	dit_delay();
 80004d2:	f7ff fe81 	bl	80001d8 <dit_delay>
	dit(pGpiodOutReg);
 80004d6:	6878      	ldr	r0, [r7, #4]
 80004d8:	f7ff fec0 	bl	800025c <dit>
	dit_delay();
 80004dc:	f7ff fe7c 	bl	80001d8 <dit_delay>
	dit(pGpiodOutReg);
 80004e0:	6878      	ldr	r0, [r7, #4]
 80004e2:	f7ff febb 	bl	800025c <dit>
	dit_delay();
 80004e6:	f7ff fe77 	bl	80001d8 <dit_delay>
	dit(pGpiodOutReg);
 80004ea:	6878      	ldr	r0, [r7, #4]
 80004ec:	f7ff feb6 	bl	800025c <dit>
	dah_delay();
 80004f0:	f7ff fe88 	bl	8000204 <dah_delay>
}
 80004f4:	bf00      	nop
 80004f6:	3708      	adds	r7, #8
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}

080004fc <flash_C>:
void flash_C(GPIOx_ODR *pGpiodOutReg){
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
	dah(pGpiodOutReg);
 8000504:	6878      	ldr	r0, [r7, #4]
 8000506:	f7ff fec9 	bl	800029c <dah>
	dit_delay();
 800050a:	f7ff fe65 	bl	80001d8 <dit_delay>
	dit(pGpiodOutReg);
 800050e:	6878      	ldr	r0, [r7, #4]
 8000510:	f7ff fea4 	bl	800025c <dit>
	dit_delay();
 8000514:	f7ff fe60 	bl	80001d8 <dit_delay>
	dah(pGpiodOutReg);
 8000518:	6878      	ldr	r0, [r7, #4]
 800051a:	f7ff febf 	bl	800029c <dah>
	dit_delay();
 800051e:	f7ff fe5b 	bl	80001d8 <dit_delay>
	dit(pGpiodOutReg);
 8000522:	6878      	ldr	r0, [r7, #4]
 8000524:	f7ff fe9a 	bl	800025c <dit>
	dah_delay();
 8000528:	f7ff fe6c 	bl	8000204 <dah_delay>
}
 800052c:	bf00      	nop
 800052e:	3708      	adds	r7, #8
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}

08000534 <flash_D>:
void flash_D(GPIOx_ODR *pGpiodOutReg){
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
	dah(pGpiodOutReg);
 800053c:	6878      	ldr	r0, [r7, #4]
 800053e:	f7ff fead 	bl	800029c <dah>
	dit_delay();
 8000542:	f7ff fe49 	bl	80001d8 <dit_delay>
	dit(pGpiodOutReg);
 8000546:	6878      	ldr	r0, [r7, #4]
 8000548:	f7ff fe88 	bl	800025c <dit>
	dit_delay();
 800054c:	f7ff fe44 	bl	80001d8 <dit_delay>
	dit(pGpiodOutReg);
 8000550:	6878      	ldr	r0, [r7, #4]
 8000552:	f7ff fe83 	bl	800025c <dit>
	dah_delay();
 8000556:	f7ff fe55 	bl	8000204 <dah_delay>
}
 800055a:	bf00      	nop
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}

08000562 <flash_E>:
void flash_E(GPIOx_ODR *pGpiodOutReg){
 8000562:	b580      	push	{r7, lr}
 8000564:	b082      	sub	sp, #8
 8000566:	af00      	add	r7, sp, #0
 8000568:	6078      	str	r0, [r7, #4]
	dit(pGpiodOutReg);
 800056a:	6878      	ldr	r0, [r7, #4]
 800056c:	f7ff fe76 	bl	800025c <dit>
	dah_delay();
 8000570:	f7ff fe48 	bl	8000204 <dah_delay>
}
 8000574:	bf00      	nop
 8000576:	3708      	adds	r7, #8
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}

0800057c <flash_F>:
void flash_F(GPIOx_ODR *pGpiodOutReg){
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	dit(pGpiodOutReg);
 8000584:	6878      	ldr	r0, [r7, #4]
 8000586:	f7ff fe69 	bl	800025c <dit>
	dit_delay();
 800058a:	f7ff fe25 	bl	80001d8 <dit_delay>
	dit(pGpiodOutReg);
 800058e:	6878      	ldr	r0, [r7, #4]
 8000590:	f7ff fe64 	bl	800025c <dit>
	dit_delay();
 8000594:	f7ff fe20 	bl	80001d8 <dit_delay>
	dah(pGpiodOutReg);
 8000598:	6878      	ldr	r0, [r7, #4]
 800059a:	f7ff fe7f 	bl	800029c <dah>
	dit_delay();
 800059e:	f7ff fe1b 	bl	80001d8 <dit_delay>
	dit(pGpiodOutReg);
 80005a2:	6878      	ldr	r0, [r7, #4]
 80005a4:	f7ff fe5a 	bl	800025c <dit>
	dah_delay();
 80005a8:	f7ff fe2c 	bl	8000204 <dah_delay>
}
 80005ac:	bf00      	nop
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <flash_G>:
void flash_G(GPIOx_ODR *pGpiodOutReg){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	dah(pGpiodOutReg);
 80005bc:	6878      	ldr	r0, [r7, #4]
 80005be:	f7ff fe6d 	bl	800029c <dah>
	dit_delay();
 80005c2:	f7ff fe09 	bl	80001d8 <dit_delay>
	dah(pGpiodOutReg);
 80005c6:	6878      	ldr	r0, [r7, #4]
 80005c8:	f7ff fe68 	bl	800029c <dah>
	dit_delay();
 80005cc:	f7ff fe04 	bl	80001d8 <dit_delay>
	dit(pGpiodOutReg);
 80005d0:	6878      	ldr	r0, [r7, #4]
 80005d2:	f7ff fe43 	bl	800025c <dit>
	dah_delay();
 80005d6:	f7ff fe15 	bl	8000204 <dah_delay>
}
 80005da:	bf00      	nop
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}

080005e2 <flash_H>:
void flash_H(GPIOx_ODR *pGpiodOutReg){
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b082      	sub	sp, #8
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	6078      	str	r0, [r7, #4]
	dit(pGpiodOutReg);
 80005ea:	6878      	ldr	r0, [r7, #4]
 80005ec:	f7ff fe36 	bl	800025c <dit>
	dit_delay();
 80005f0:	f7ff fdf2 	bl	80001d8 <dit_delay>
	dit(pGpiodOutReg);
 80005f4:	6878      	ldr	r0, [r7, #4]
 80005f6:	f7ff fe31 	bl	800025c <dit>
	dit_delay();
 80005fa:	f7ff fded 	bl	80001d8 <dit_delay>
	dit(pGpiodOutReg);
 80005fe:	6878      	ldr	r0, [r7, #4]
 8000600:	f7ff fe2c 	bl	800025c <dit>
	dit_delay();
 8000604:	f7ff fde8 	bl	80001d8 <dit_delay>
	dit(pGpiodOutReg);
 8000608:	6878      	ldr	r0, [r7, #4]
 800060a:	f7ff fe27 	bl	800025c <dit>
	dah_delay();
 800060e:	f7ff fdf9 	bl	8000204 <dah_delay>
}
 8000612:	bf00      	nop
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}

0800061a <flash_I>:
void flash_I(GPIOx_ODR *pGpiodOutReg){
 800061a:	b580      	push	{r7, lr}
 800061c:	b082      	sub	sp, #8
 800061e:	af00      	add	r7, sp, #0
 8000620:	6078      	str	r0, [r7, #4]
	dit(pGpiodOutReg);
 8000622:	6878      	ldr	r0, [r7, #4]
 8000624:	f7ff fe1a 	bl	800025c <dit>
	dit_delay();
 8000628:	f7ff fdd6 	bl	80001d8 <dit_delay>
	dit(pGpiodOutReg);
 800062c:	6878      	ldr	r0, [r7, #4]
 800062e:	f7ff fe15 	bl	800025c <dit>
	dah_delay();
 8000632:	f7ff fde7 	bl	8000204 <dah_delay>
}
 8000636:	bf00      	nop
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}

0800063e <flash_J>:
void flash_J(GPIOx_ODR *pGpiodOutReg){
 800063e:	b580      	push	{r7, lr}
 8000640:	b082      	sub	sp, #8
 8000642:	af00      	add	r7, sp, #0
 8000644:	6078      	str	r0, [r7, #4]
	dit(pGpiodOutReg);
 8000646:	6878      	ldr	r0, [r7, #4]
 8000648:	f7ff fe08 	bl	800025c <dit>
	dit_delay();
 800064c:	f7ff fdc4 	bl	80001d8 <dit_delay>
	dah(pGpiodOutReg);
 8000650:	6878      	ldr	r0, [r7, #4]
 8000652:	f7ff fe23 	bl	800029c <dah>
	dit_delay();
 8000656:	f7ff fdbf 	bl	80001d8 <dit_delay>
	dah(pGpiodOutReg);
 800065a:	6878      	ldr	r0, [r7, #4]
 800065c:	f7ff fe1e 	bl	800029c <dah>
	dit_delay();
 8000660:	f7ff fdba 	bl	80001d8 <dit_delay>
	dah(pGpiodOutReg);
 8000664:	6878      	ldr	r0, [r7, #4]
 8000666:	f7ff fe19 	bl	800029c <dah>
	dah_delay();
 800066a:	f7ff fdcb 	bl	8000204 <dah_delay>
}
 800066e:	bf00      	nop
 8000670:	3708      	adds	r7, #8
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}

08000676 <flash_K>:
void flash_K(GPIOx_ODR *pGpiodOutReg){
 8000676:	b580      	push	{r7, lr}
 8000678:	b082      	sub	sp, #8
 800067a:	af00      	add	r7, sp, #0
 800067c:	6078      	str	r0, [r7, #4]
	dah(pGpiodOutReg);
 800067e:	6878      	ldr	r0, [r7, #4]
 8000680:	f7ff fe0c 	bl	800029c <dah>
	dit_delay();
 8000684:	f7ff fda8 	bl	80001d8 <dit_delay>
	dit(pGpiodOutReg);
 8000688:	6878      	ldr	r0, [r7, #4]
 800068a:	f7ff fde7 	bl	800025c <dit>
	dit_delay();
 800068e:	f7ff fda3 	bl	80001d8 <dit_delay>
	dah(pGpiodOutReg);
 8000692:	6878      	ldr	r0, [r7, #4]
 8000694:	f7ff fe02 	bl	800029c <dah>
	dah_delay();
 8000698:	f7ff fdb4 	bl	8000204 <dah_delay>
}
 800069c:	bf00      	nop
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <flash_L>:
void flash_L(GPIOx_ODR *pGpiodOutReg){
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
	dit(pGpiodOutReg);
 80006ac:	6878      	ldr	r0, [r7, #4]
 80006ae:	f7ff fdd5 	bl	800025c <dit>
	dit_delay();
 80006b2:	f7ff fd91 	bl	80001d8 <dit_delay>
	dah(pGpiodOutReg);
 80006b6:	6878      	ldr	r0, [r7, #4]
 80006b8:	f7ff fdf0 	bl	800029c <dah>
	dit_delay();
 80006bc:	f7ff fd8c 	bl	80001d8 <dit_delay>
	dit(pGpiodOutReg);
 80006c0:	6878      	ldr	r0, [r7, #4]
 80006c2:	f7ff fdcb 	bl	800025c <dit>
	dit_delay();
 80006c6:	f7ff fd87 	bl	80001d8 <dit_delay>
	dit(pGpiodOutReg);
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f7ff fdc6 	bl	800025c <dit>
	dah_delay();
 80006d0:	f7ff fd98 	bl	8000204 <dah_delay>
}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}

080006dc <flash_M>:
void flash_M(GPIOx_ODR *pGpiodOutReg){
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
	dah(pGpiodOutReg);
 80006e4:	6878      	ldr	r0, [r7, #4]
 80006e6:	f7ff fdd9 	bl	800029c <dah>
	dit_delay();
 80006ea:	f7ff fd75 	bl	80001d8 <dit_delay>
	dah(pGpiodOutReg);
 80006ee:	6878      	ldr	r0, [r7, #4]
 80006f0:	f7ff fdd4 	bl	800029c <dah>
	dah_delay();
 80006f4:	f7ff fd86 	bl	8000204 <dah_delay>
}
 80006f8:	bf00      	nop
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}

08000700 <flash_N>:
void flash_N(GPIOx_ODR *pGpiodOutReg){
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
	dah(pGpiodOutReg);
 8000708:	6878      	ldr	r0, [r7, #4]
 800070a:	f7ff fdc7 	bl	800029c <dah>
	dit_delay();
 800070e:	f7ff fd63 	bl	80001d8 <dit_delay>
	dit(pGpiodOutReg);
 8000712:	6878      	ldr	r0, [r7, #4]
 8000714:	f7ff fda2 	bl	800025c <dit>
	dah_delay();
 8000718:	f7ff fd74 	bl	8000204 <dah_delay>
}
 800071c:	bf00      	nop
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <flash_O>:
void flash_O(GPIOx_ODR *pGpiodOutReg){
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	dah(pGpiodOutReg);
 800072c:	6878      	ldr	r0, [r7, #4]
 800072e:	f7ff fdb5 	bl	800029c <dah>
	dit_delay();
 8000732:	f7ff fd51 	bl	80001d8 <dit_delay>
	dah(pGpiodOutReg);
 8000736:	6878      	ldr	r0, [r7, #4]
 8000738:	f7ff fdb0 	bl	800029c <dah>
	dit_delay();
 800073c:	f7ff fd4c 	bl	80001d8 <dit_delay>
	dah(pGpiodOutReg);
 8000740:	6878      	ldr	r0, [r7, #4]
 8000742:	f7ff fdab 	bl	800029c <dah>
	dah_delay();
 8000746:	f7ff fd5d 	bl	8000204 <dah_delay>
}
 800074a:	bf00      	nop
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}

08000752 <flash_P>:
void flash_P(GPIOx_ODR *pGpiodOutReg){
 8000752:	b580      	push	{r7, lr}
 8000754:	b082      	sub	sp, #8
 8000756:	af00      	add	r7, sp, #0
 8000758:	6078      	str	r0, [r7, #4]
	dit(pGpiodOutReg);
 800075a:	6878      	ldr	r0, [r7, #4]
 800075c:	f7ff fd7e 	bl	800025c <dit>
	dit_delay();
 8000760:	f7ff fd3a 	bl	80001d8 <dit_delay>
	dah(pGpiodOutReg);
 8000764:	6878      	ldr	r0, [r7, #4]
 8000766:	f7ff fd99 	bl	800029c <dah>
	dit_delay();
 800076a:	f7ff fd35 	bl	80001d8 <dit_delay>
	dah(pGpiodOutReg);
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f7ff fd94 	bl	800029c <dah>
	dit_delay();
 8000774:	f7ff fd30 	bl	80001d8 <dit_delay>
	dit(pGpiodOutReg);
 8000778:	6878      	ldr	r0, [r7, #4]
 800077a:	f7ff fd6f 	bl	800025c <dit>
	dah_delay();
 800077e:	f7ff fd41 	bl	8000204 <dah_delay>
}
 8000782:	bf00      	nop
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}

0800078a <flash_Q>:
void flash_Q(GPIOx_ODR *pGpiodOutReg){
 800078a:	b580      	push	{r7, lr}
 800078c:	b082      	sub	sp, #8
 800078e:	af00      	add	r7, sp, #0
 8000790:	6078      	str	r0, [r7, #4]
	dah(pGpiodOutReg);
 8000792:	6878      	ldr	r0, [r7, #4]
 8000794:	f7ff fd82 	bl	800029c <dah>
	dit_delay();
 8000798:	f7ff fd1e 	bl	80001d8 <dit_delay>
	dah(pGpiodOutReg);
 800079c:	6878      	ldr	r0, [r7, #4]
 800079e:	f7ff fd7d 	bl	800029c <dah>
	dit_delay();
 80007a2:	f7ff fd19 	bl	80001d8 <dit_delay>
	dit(pGpiodOutReg);
 80007a6:	6878      	ldr	r0, [r7, #4]
 80007a8:	f7ff fd58 	bl	800025c <dit>
	dit_delay();
 80007ac:	f7ff fd14 	bl	80001d8 <dit_delay>
	dah(pGpiodOutReg);
 80007b0:	6878      	ldr	r0, [r7, #4]
 80007b2:	f7ff fd73 	bl	800029c <dah>
	dah_delay();
 80007b6:	f7ff fd25 	bl	8000204 <dah_delay>
}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <flash_R>:
void flash_R(GPIOx_ODR *pGpiodOutReg){
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b082      	sub	sp, #8
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	6078      	str	r0, [r7, #4]
	dit(pGpiodOutReg);
 80007ca:	6878      	ldr	r0, [r7, #4]
 80007cc:	f7ff fd46 	bl	800025c <dit>
	dit_delay();
 80007d0:	f7ff fd02 	bl	80001d8 <dit_delay>
	dah(pGpiodOutReg);
 80007d4:	6878      	ldr	r0, [r7, #4]
 80007d6:	f7ff fd61 	bl	800029c <dah>
	dit_delay();
 80007da:	f7ff fcfd 	bl	80001d8 <dit_delay>
	dit(pGpiodOutReg);
 80007de:	6878      	ldr	r0, [r7, #4]
 80007e0:	f7ff fd3c 	bl	800025c <dit>
	dah_delay();
 80007e4:	f7ff fd0e 	bl	8000204 <dah_delay>
}
 80007e8:	bf00      	nop
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <flash_S>:
void flash_S(GPIOx_ODR *pGpiodOutReg){
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
	dit(pGpiodOutReg);
 80007f8:	6878      	ldr	r0, [r7, #4]
 80007fa:	f7ff fd2f 	bl	800025c <dit>
	dit_delay();
 80007fe:	f7ff fceb 	bl	80001d8 <dit_delay>
	dit(pGpiodOutReg);
 8000802:	6878      	ldr	r0, [r7, #4]
 8000804:	f7ff fd2a 	bl	800025c <dit>
	dit_delay();
 8000808:	f7ff fce6 	bl	80001d8 <dit_delay>
	dit(pGpiodOutReg);
 800080c:	6878      	ldr	r0, [r7, #4]
 800080e:	f7ff fd25 	bl	800025c <dit>
	dah_delay();
 8000812:	f7ff fcf7 	bl	8000204 <dah_delay>
}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}

0800081e <flash_T>:
void flash_T(GPIOx_ODR *pGpiodOutReg){
 800081e:	b580      	push	{r7, lr}
 8000820:	b082      	sub	sp, #8
 8000822:	af00      	add	r7, sp, #0
 8000824:	6078      	str	r0, [r7, #4]
	dah(pGpiodOutReg);
 8000826:	6878      	ldr	r0, [r7, #4]
 8000828:	f7ff fd38 	bl	800029c <dah>
	dah_delay();
 800082c:	f7ff fcea 	bl	8000204 <dah_delay>
}
 8000830:	bf00      	nop
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <flash_U>:
void flash_U(GPIOx_ODR *pGpiodOutReg){
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
	dit(pGpiodOutReg);
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f7ff fd0b 	bl	800025c <dit>
	dit_delay();
 8000846:	f7ff fcc7 	bl	80001d8 <dit_delay>
	dit(pGpiodOutReg);
 800084a:	6878      	ldr	r0, [r7, #4]
 800084c:	f7ff fd06 	bl	800025c <dit>
	dit_delay();
 8000850:	f7ff fcc2 	bl	80001d8 <dit_delay>
	dah(pGpiodOutReg);
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f7ff fd21 	bl	800029c <dah>
	dah_delay();
 800085a:	f7ff fcd3 	bl	8000204 <dah_delay>
}
 800085e:	bf00      	nop
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}

08000866 <flash_V>:
void flash_V(GPIOx_ODR *pGpiodOutReg){
 8000866:	b580      	push	{r7, lr}
 8000868:	b082      	sub	sp, #8
 800086a:	af00      	add	r7, sp, #0
 800086c:	6078      	str	r0, [r7, #4]
	dit(pGpiodOutReg);
 800086e:	6878      	ldr	r0, [r7, #4]
 8000870:	f7ff fcf4 	bl	800025c <dit>
	dit_delay();
 8000874:	f7ff fcb0 	bl	80001d8 <dit_delay>
	dit(pGpiodOutReg);
 8000878:	6878      	ldr	r0, [r7, #4]
 800087a:	f7ff fcef 	bl	800025c <dit>
	dit_delay();
 800087e:	f7ff fcab 	bl	80001d8 <dit_delay>
	dit(pGpiodOutReg);
 8000882:	6878      	ldr	r0, [r7, #4]
 8000884:	f7ff fcea 	bl	800025c <dit>
	dit_delay();
 8000888:	f7ff fca6 	bl	80001d8 <dit_delay>
	dah(pGpiodOutReg);
 800088c:	6878      	ldr	r0, [r7, #4]
 800088e:	f7ff fd05 	bl	800029c <dah>
	dah_delay();
 8000892:	f7ff fcb7 	bl	8000204 <dah_delay>
}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}

0800089e <flash_W>:
void flash_W(GPIOx_ODR *pGpiodOutReg){
 800089e:	b580      	push	{r7, lr}
 80008a0:	b082      	sub	sp, #8
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	6078      	str	r0, [r7, #4]
	dit(pGpiodOutReg);
 80008a6:	6878      	ldr	r0, [r7, #4]
 80008a8:	f7ff fcd8 	bl	800025c <dit>
	dit_delay();
 80008ac:	f7ff fc94 	bl	80001d8 <dit_delay>
	dah(pGpiodOutReg);
 80008b0:	6878      	ldr	r0, [r7, #4]
 80008b2:	f7ff fcf3 	bl	800029c <dah>
	dit_delay();
 80008b6:	f7ff fc8f 	bl	80001d8 <dit_delay>
	dah(pGpiodOutReg);
 80008ba:	6878      	ldr	r0, [r7, #4]
 80008bc:	f7ff fcee 	bl	800029c <dah>
	dah_delay();
 80008c0:	f7ff fca0 	bl	8000204 <dah_delay>
}
 80008c4:	bf00      	nop
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}

080008cc <flash_X>:
void flash_X(GPIOx_ODR *pGpiodOutReg){
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
	dah(pGpiodOutReg);
 80008d4:	6878      	ldr	r0, [r7, #4]
 80008d6:	f7ff fce1 	bl	800029c <dah>
	dit_delay();
 80008da:	f7ff fc7d 	bl	80001d8 <dit_delay>
	dit(pGpiodOutReg);
 80008de:	6878      	ldr	r0, [r7, #4]
 80008e0:	f7ff fcbc 	bl	800025c <dit>
	dit_delay();
 80008e4:	f7ff fc78 	bl	80001d8 <dit_delay>
	dit(pGpiodOutReg);
 80008e8:	6878      	ldr	r0, [r7, #4]
 80008ea:	f7ff fcb7 	bl	800025c <dit>
	dit_delay();
 80008ee:	f7ff fc73 	bl	80001d8 <dit_delay>
	dah(pGpiodOutReg);
 80008f2:	6878      	ldr	r0, [r7, #4]
 80008f4:	f7ff fcd2 	bl	800029c <dah>
	dah_delay();
 80008f8:	f7ff fc84 	bl	8000204 <dah_delay>
}
 80008fc:	bf00      	nop
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}

08000904 <flash_Y>:
void flash_Y(GPIOx_ODR *pGpiodOutReg){
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
	dah(pGpiodOutReg);
 800090c:	6878      	ldr	r0, [r7, #4]
 800090e:	f7ff fcc5 	bl	800029c <dah>
	dit_delay();
 8000912:	f7ff fc61 	bl	80001d8 <dit_delay>
	dit(pGpiodOutReg);
 8000916:	6878      	ldr	r0, [r7, #4]
 8000918:	f7ff fca0 	bl	800025c <dit>
	dit_delay();
 800091c:	f7ff fc5c 	bl	80001d8 <dit_delay>
	dah(pGpiodOutReg);
 8000920:	6878      	ldr	r0, [r7, #4]
 8000922:	f7ff fcbb 	bl	800029c <dah>
	dit_delay();
 8000926:	f7ff fc57 	bl	80001d8 <dit_delay>
	dah(pGpiodOutReg);
 800092a:	6878      	ldr	r0, [r7, #4]
 800092c:	f7ff fcb6 	bl	800029c <dah>
	dah_delay();
 8000930:	f7ff fc68 	bl	8000204 <dah_delay>
}
 8000934:	bf00      	nop
 8000936:	3708      	adds	r7, #8
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}

0800093c <flash_Z>:
void flash_Z(GPIOx_ODR *pGpiodOutReg){
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
	dah(pGpiodOutReg);
 8000944:	6878      	ldr	r0, [r7, #4]
 8000946:	f7ff fca9 	bl	800029c <dah>
	dit_delay();
 800094a:	f7ff fc45 	bl	80001d8 <dit_delay>
	dah(pGpiodOutReg);
 800094e:	6878      	ldr	r0, [r7, #4]
 8000950:	f7ff fca4 	bl	800029c <dah>
	dit_delay();
 8000954:	f7ff fc40 	bl	80001d8 <dit_delay>
	dit(pGpiodOutReg);
 8000958:	6878      	ldr	r0, [r7, #4]
 800095a:	f7ff fc7f 	bl	800025c <dit>
	dit_delay();
 800095e:	f7ff fc3b 	bl	80001d8 <dit_delay>
	dit(pGpiodOutReg);
 8000962:	6878      	ldr	r0, [r7, #4]
 8000964:	f7ff fc7a 	bl	800025c <dit>
	dah_delay();
 8000968:	f7ff fc4c 	bl	8000204 <dah_delay>
}
 800096c:	bf00      	nop
 800096e:	3708      	adds	r7, #8
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}

08000974 <flash_1>:
void flash_1(GPIOx_ODR *pGpiodOutReg){
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
	dit(pGpiodOutReg);
 800097c:	6878      	ldr	r0, [r7, #4]
 800097e:	f7ff fc6d 	bl	800025c <dit>
	dit_delay();
 8000982:	f7ff fc29 	bl	80001d8 <dit_delay>
	dah(pGpiodOutReg);
 8000986:	6878      	ldr	r0, [r7, #4]
 8000988:	f7ff fc88 	bl	800029c <dah>
	dit_delay();
 800098c:	f7ff fc24 	bl	80001d8 <dit_delay>
	dah(pGpiodOutReg);
 8000990:	6878      	ldr	r0, [r7, #4]
 8000992:	f7ff fc83 	bl	800029c <dah>
	dit_delay();
 8000996:	f7ff fc1f 	bl	80001d8 <dit_delay>
	dah(pGpiodOutReg);
 800099a:	6878      	ldr	r0, [r7, #4]
 800099c:	f7ff fc7e 	bl	800029c <dah>
	dit_delay();
 80009a0:	f7ff fc1a 	bl	80001d8 <dit_delay>
	dah(pGpiodOutReg);
 80009a4:	6878      	ldr	r0, [r7, #4]
 80009a6:	f7ff fc79 	bl	800029c <dah>
	dah_delay();
 80009aa:	f7ff fc2b 	bl	8000204 <dah_delay>
}
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <flash_2>:
void flash_2(GPIOx_ODR *pGpiodOutReg){
 80009b6:	b580      	push	{r7, lr}
 80009b8:	b082      	sub	sp, #8
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	6078      	str	r0, [r7, #4]
	dit(pGpiodOutReg);
 80009be:	6878      	ldr	r0, [r7, #4]
 80009c0:	f7ff fc4c 	bl	800025c <dit>
	dit_delay();
 80009c4:	f7ff fc08 	bl	80001d8 <dit_delay>
	dit(pGpiodOutReg);
 80009c8:	6878      	ldr	r0, [r7, #4]
 80009ca:	f7ff fc47 	bl	800025c <dit>
	dit_delay();
 80009ce:	f7ff fc03 	bl	80001d8 <dit_delay>
	dah(pGpiodOutReg);
 80009d2:	6878      	ldr	r0, [r7, #4]
 80009d4:	f7ff fc62 	bl	800029c <dah>
	dit_delay();
 80009d8:	f7ff fbfe 	bl	80001d8 <dit_delay>
	dah(pGpiodOutReg);
 80009dc:	6878      	ldr	r0, [r7, #4]
 80009de:	f7ff fc5d 	bl	800029c <dah>
	dit_delay();
 80009e2:	f7ff fbf9 	bl	80001d8 <dit_delay>
	dah(pGpiodOutReg);
 80009e6:	6878      	ldr	r0, [r7, #4]
 80009e8:	f7ff fc58 	bl	800029c <dah>
	dah_delay();
 80009ec:	f7ff fc0a 	bl	8000204 <dah_delay>
}
 80009f0:	bf00      	nop
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <flash_3>:
void flash_3(GPIOx_ODR *pGpiodOutReg){
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
	dit(pGpiodOutReg);
 8000a00:	6878      	ldr	r0, [r7, #4]
 8000a02:	f7ff fc2b 	bl	800025c <dit>
	dit_delay();
 8000a06:	f7ff fbe7 	bl	80001d8 <dit_delay>
	dit(pGpiodOutReg);
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f7ff fc26 	bl	800025c <dit>
	dit_delay();
 8000a10:	f7ff fbe2 	bl	80001d8 <dit_delay>
	dit(pGpiodOutReg);
 8000a14:	6878      	ldr	r0, [r7, #4]
 8000a16:	f7ff fc21 	bl	800025c <dit>
	dit_delay();
 8000a1a:	f7ff fbdd 	bl	80001d8 <dit_delay>
	dah(pGpiodOutReg);
 8000a1e:	6878      	ldr	r0, [r7, #4]
 8000a20:	f7ff fc3c 	bl	800029c <dah>
	dit_delay();
 8000a24:	f7ff fbd8 	bl	80001d8 <dit_delay>
	dah(pGpiodOutReg);
 8000a28:	6878      	ldr	r0, [r7, #4]
 8000a2a:	f7ff fc37 	bl	800029c <dah>
	dah_delay();
 8000a2e:	f7ff fbe9 	bl	8000204 <dah_delay>
}
 8000a32:	bf00      	nop
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}

08000a3a <flash_4>:
void flash_4(GPIOx_ODR *pGpiodOutReg){
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	b082      	sub	sp, #8
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	6078      	str	r0, [r7, #4]
	dit(pGpiodOutReg);
 8000a42:	6878      	ldr	r0, [r7, #4]
 8000a44:	f7ff fc0a 	bl	800025c <dit>
	dit_delay();
 8000a48:	f7ff fbc6 	bl	80001d8 <dit_delay>
	dit(pGpiodOutReg);
 8000a4c:	6878      	ldr	r0, [r7, #4]
 8000a4e:	f7ff fc05 	bl	800025c <dit>
	dit_delay();
 8000a52:	f7ff fbc1 	bl	80001d8 <dit_delay>
	dit(pGpiodOutReg);
 8000a56:	6878      	ldr	r0, [r7, #4]
 8000a58:	f7ff fc00 	bl	800025c <dit>
	dit_delay();
 8000a5c:	f7ff fbbc 	bl	80001d8 <dit_delay>
	dit(pGpiodOutReg);
 8000a60:	6878      	ldr	r0, [r7, #4]
 8000a62:	f7ff fbfb 	bl	800025c <dit>
	dit_delay();
 8000a66:	f7ff fbb7 	bl	80001d8 <dit_delay>
	dah(pGpiodOutReg);
 8000a6a:	6878      	ldr	r0, [r7, #4]
 8000a6c:	f7ff fc16 	bl	800029c <dah>
	dah_delay();
 8000a70:	f7ff fbc8 	bl	8000204 <dah_delay>
}
 8000a74:	bf00      	nop
 8000a76:	3708      	adds	r7, #8
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <flash_5>:
void flash_5(GPIOx_ODR *pGpiodOutReg){
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
	dit(pGpiodOutReg);
 8000a84:	6878      	ldr	r0, [r7, #4]
 8000a86:	f7ff fbe9 	bl	800025c <dit>
	dit_delay();
 8000a8a:	f7ff fba5 	bl	80001d8 <dit_delay>
	dit(pGpiodOutReg);
 8000a8e:	6878      	ldr	r0, [r7, #4]
 8000a90:	f7ff fbe4 	bl	800025c <dit>
	dit_delay();
 8000a94:	f7ff fba0 	bl	80001d8 <dit_delay>
	dit(pGpiodOutReg);
 8000a98:	6878      	ldr	r0, [r7, #4]
 8000a9a:	f7ff fbdf 	bl	800025c <dit>
	dit_delay();
 8000a9e:	f7ff fb9b 	bl	80001d8 <dit_delay>
	dit(pGpiodOutReg);
 8000aa2:	6878      	ldr	r0, [r7, #4]
 8000aa4:	f7ff fbda 	bl	800025c <dit>
	dit_delay();
 8000aa8:	f7ff fb96 	bl	80001d8 <dit_delay>
	dit(pGpiodOutReg);
 8000aac:	6878      	ldr	r0, [r7, #4]
 8000aae:	f7ff fbd5 	bl	800025c <dit>
	dah_delay();
 8000ab2:	f7ff fba7 	bl	8000204 <dah_delay>
}
 8000ab6:	bf00      	nop
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}

08000abe <flash_6>:
void flash_6(GPIOx_ODR *pGpiodOutReg){
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	b082      	sub	sp, #8
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	6078      	str	r0, [r7, #4]
	dah(pGpiodOutReg);
 8000ac6:	6878      	ldr	r0, [r7, #4]
 8000ac8:	f7ff fbe8 	bl	800029c <dah>
	dit_delay();
 8000acc:	f7ff fb84 	bl	80001d8 <dit_delay>
	dit(pGpiodOutReg);
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f7ff fbc3 	bl	800025c <dit>
	dit_delay();
 8000ad6:	f7ff fb7f 	bl	80001d8 <dit_delay>
	dit(pGpiodOutReg);
 8000ada:	6878      	ldr	r0, [r7, #4]
 8000adc:	f7ff fbbe 	bl	800025c <dit>
	dit_delay();
 8000ae0:	f7ff fb7a 	bl	80001d8 <dit_delay>
	dit(pGpiodOutReg);
 8000ae4:	6878      	ldr	r0, [r7, #4]
 8000ae6:	f7ff fbb9 	bl	800025c <dit>
	dit_delay();
 8000aea:	f7ff fb75 	bl	80001d8 <dit_delay>
	dit(pGpiodOutReg);
 8000aee:	6878      	ldr	r0, [r7, #4]
 8000af0:	f7ff fbb4 	bl	800025c <dit>
	dah_delay();
 8000af4:	f7ff fb86 	bl	8000204 <dah_delay>
}
 8000af8:	bf00      	nop
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <flash_7>:
void flash_7(GPIOx_ODR *pGpiodOutReg){
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
	dah(pGpiodOutReg);
 8000b08:	6878      	ldr	r0, [r7, #4]
 8000b0a:	f7ff fbc7 	bl	800029c <dah>
	dit_delay();
 8000b0e:	f7ff fb63 	bl	80001d8 <dit_delay>
	dah(pGpiodOutReg);
 8000b12:	6878      	ldr	r0, [r7, #4]
 8000b14:	f7ff fbc2 	bl	800029c <dah>
	dit_delay();
 8000b18:	f7ff fb5e 	bl	80001d8 <dit_delay>
	dit(pGpiodOutReg);
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f7ff fb9d 	bl	800025c <dit>
	dit_delay();
 8000b22:	f7ff fb59 	bl	80001d8 <dit_delay>
	dit(pGpiodOutReg);
 8000b26:	6878      	ldr	r0, [r7, #4]
 8000b28:	f7ff fb98 	bl	800025c <dit>
	dit_delay();
 8000b2c:	f7ff fb54 	bl	80001d8 <dit_delay>
	dit(pGpiodOutReg);
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	f7ff fb93 	bl	800025c <dit>
	dah_delay();
 8000b36:	f7ff fb65 	bl	8000204 <dah_delay>
}
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <flash_8>:
void flash_8(GPIOx_ODR *pGpiodOutReg){
 8000b42:	b580      	push	{r7, lr}
 8000b44:	b082      	sub	sp, #8
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	6078      	str	r0, [r7, #4]
	dah(pGpiodOutReg);
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f7ff fba6 	bl	800029c <dah>
	dit_delay();
 8000b50:	f7ff fb42 	bl	80001d8 <dit_delay>
	dah(pGpiodOutReg);
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	f7ff fba1 	bl	800029c <dah>
	dit_delay();
 8000b5a:	f7ff fb3d 	bl	80001d8 <dit_delay>
	dah(pGpiodOutReg);
 8000b5e:	6878      	ldr	r0, [r7, #4]
 8000b60:	f7ff fb9c 	bl	800029c <dah>
	dit_delay();
 8000b64:	f7ff fb38 	bl	80001d8 <dit_delay>
	dit(pGpiodOutReg);
 8000b68:	6878      	ldr	r0, [r7, #4]
 8000b6a:	f7ff fb77 	bl	800025c <dit>
	dit_delay();
 8000b6e:	f7ff fb33 	bl	80001d8 <dit_delay>
	dit(pGpiodOutReg);
 8000b72:	6878      	ldr	r0, [r7, #4]
 8000b74:	f7ff fb72 	bl	800025c <dit>
	dah_delay();
 8000b78:	f7ff fb44 	bl	8000204 <dah_delay>
}
 8000b7c:	bf00      	nop
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <flash_9>:
void flash_9(GPIOx_ODR *pGpiodOutReg){
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
	dah(pGpiodOutReg);
 8000b8c:	6878      	ldr	r0, [r7, #4]
 8000b8e:	f7ff fb85 	bl	800029c <dah>
	dit_delay();
 8000b92:	f7ff fb21 	bl	80001d8 <dit_delay>
	dah(pGpiodOutReg);
 8000b96:	6878      	ldr	r0, [r7, #4]
 8000b98:	f7ff fb80 	bl	800029c <dah>
	dit_delay();
 8000b9c:	f7ff fb1c 	bl	80001d8 <dit_delay>
	dah(pGpiodOutReg);
 8000ba0:	6878      	ldr	r0, [r7, #4]
 8000ba2:	f7ff fb7b 	bl	800029c <dah>
	dit_delay();
 8000ba6:	f7ff fb17 	bl	80001d8 <dit_delay>
	dah(pGpiodOutReg);
 8000baa:	6878      	ldr	r0, [r7, #4]
 8000bac:	f7ff fb76 	bl	800029c <dah>
	dit_delay();
 8000bb0:	f7ff fb12 	bl	80001d8 <dit_delay>
	dit(pGpiodOutReg);
 8000bb4:	6878      	ldr	r0, [r7, #4]
 8000bb6:	f7ff fb51 	bl	800025c <dit>
	dah_delay();
 8000bba:	f7ff fb23 	bl	8000204 <dah_delay>
}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <flash_0>:
void flash_0(GPIOx_ODR *pGpiodOutReg){
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b082      	sub	sp, #8
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
	dah(pGpiodOutReg);
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f7ff fb64 	bl	800029c <dah>
	dit_delay();
 8000bd4:	f7ff fb00 	bl	80001d8 <dit_delay>
	dah(pGpiodOutReg);
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f7ff fb5f 	bl	800029c <dah>
	dit_delay();
 8000bde:	f7ff fafb 	bl	80001d8 <dit_delay>
	dah(pGpiodOutReg);
 8000be2:	6878      	ldr	r0, [r7, #4]
 8000be4:	f7ff fb5a 	bl	800029c <dah>
	dit_delay();
 8000be8:	f7ff faf6 	bl	80001d8 <dit_delay>
	dah(pGpiodOutReg);
 8000bec:	6878      	ldr	r0, [r7, #4]
 8000bee:	f7ff fb55 	bl	800029c <dah>
	dit_delay();
 8000bf2:	f7ff faf1 	bl	80001d8 <dit_delay>
	dah(pGpiodOutReg);
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	f7ff fb50 	bl	800029c <dah>
	dah_delay();
 8000bfc:	f7ff fb02 	bl	8000204 <dah_delay>
}
 8000c00:	bf00      	nop
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <getNumChar>:
    char alphabetChar = 'A' + charOrder - 1;

    return alphabetChar;
}

char getNumChar(char firstChar, char secondChar) {
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	460a      	mov	r2, r1
 8000c12:	71fb      	strb	r3, [r7, #7]
 8000c14:	4613      	mov	r3, r2
 8000c16:	71bb      	strb	r3, [r7, #6]

    // Check if the character order is within the valid range (ASCII 48 to 57)
    if (secondChar < 48 || secondChar > 57) {
 8000c18:	79bb      	ldrb	r3, [r7, #6]
 8000c1a:	2b2f      	cmp	r3, #47	; 0x2f
 8000c1c:	d902      	bls.n	8000c24 <getNumChar+0x1c>
 8000c1e:	79bb      	ldrb	r3, [r7, #6]
 8000c20:	2b39      	cmp	r3, #57	; 0x39
 8000c22:	d90c      	bls.n	8000c3e <getNumChar+0x36>
    	fprintf(stderr, "Number out of range.\n");
 8000c24:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <getNumChar+0x40>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	68db      	ldr	r3, [r3, #12]
 8000c2a:	2215      	movs	r2, #21
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	4807      	ldr	r0, [pc, #28]	; (8000c4c <getNumChar+0x44>)
 8000c30:	f000 ff7a 	bl	8001b28 <fwrite>
    	errState = 2;
 8000c34:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <getNumChar+0x48>)
 8000c36:	2202      	movs	r2, #2
 8000c38:	701a      	strb	r2, [r3, #0]
        return '\0'; // Return null character for invalid input
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	e000      	b.n	8000c40 <getNumChar+0x38>
    }
    // Return the second char for the character
    return secondChar;
 8000c3e:	79bb      	ldrb	r3, [r7, #6]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	20000058 	.word	0x20000058
 8000c4c:	080021f8 	.word	0x080021f8
 8000c50:	20000078 	.word	0x20000078

08000c54 <addCharToString>:
char* addCharToString(const char *str, char c) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	460b      	mov	r3, r1
 8000c5e:	70fb      	strb	r3, [r7, #3]
    // Get the length of the original string
    size_t len = strlen(str);
 8000c60:	6878      	ldr	r0, [r7, #4]
 8000c62:	f7ff fab1 	bl	80001c8 <strlen>
 8000c66:	60f8      	str	r0, [r7, #12]
    // Allocate memory for the new string which includes the additional character and the null terminator
    char *newStr = (char *)malloc((len + 2) * sizeof(char));
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	3302      	adds	r3, #2
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f000 fd99 	bl	80017a4 <malloc>
 8000c72:	4603      	mov	r3, r0
 8000c74:	60bb      	str	r3, [r7, #8]
    if (newStr == NULL) {
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d10a      	bne.n	8000c92 <addCharToString+0x3e>
    	fprintf(stderr, "Memory allocation failed.\n");
 8000c7c:	4b0f      	ldr	r3, [pc, #60]	; (8000cbc <addCharToString+0x68>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	68db      	ldr	r3, [r3, #12]
 8000c82:	221a      	movs	r2, #26
 8000c84:	2101      	movs	r1, #1
 8000c86:	480e      	ldr	r0, [pc, #56]	; (8000cc0 <addCharToString+0x6c>)
 8000c88:	f000 ff4e 	bl	8001b28 <fwrite>
    	errState = 5;
 8000c8c:	4b0d      	ldr	r3, [pc, #52]	; (8000cc4 <addCharToString+0x70>)
 8000c8e:	2205      	movs	r2, #5
 8000c90:	701a      	strb	r2, [r3, #0]
    }
    // Copy the original string to the new string
    strcpy(newStr, str);
 8000c92:	6879      	ldr	r1, [r7, #4]
 8000c94:	68b8      	ldr	r0, [r7, #8]
 8000c96:	f001 f914 	bl	8001ec2 <strcpy>
    // Add the new character to the end of the new string
    newStr[len] = c;
 8000c9a:	68ba      	ldr	r2, [r7, #8]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	78fa      	ldrb	r2, [r7, #3]
 8000ca2:	701a      	strb	r2, [r3, #0]
    // Add the null terminator to the end
    newStr[len + 1] = '\0';
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	68ba      	ldr	r2, [r7, #8]
 8000caa:	4413      	add	r3, r2
 8000cac:	2200      	movs	r2, #0
 8000cae:	701a      	strb	r2, [r3, #0]
    return newStr;
 8000cb0:	68bb      	ldr	r3, [r7, #8]
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3710      	adds	r7, #16
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20000058 	.word	0x20000058
 8000cc0:	08002210 	.word	0x08002210
 8000cc4:	20000078 	.word	0x20000078

08000cc8 <clearString>:

void clearString(char *str) {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
    // Iterate through the string and set each character to null terminator
    for (int i = 0; i < strlen(str); i++) {
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	e007      	b.n	8000ce6 <clearString+0x1e>
        str[i] = '\0';
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	687a      	ldr	r2, [r7, #4]
 8000cda:	4413      	add	r3, r2
 8000cdc:	2200      	movs	r2, #0
 8000cde:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < strlen(str); i++) {
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	f7ff fa6e 	bl	80001c8 <strlen>
 8000cec:	4602      	mov	r2, r0
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d8f0      	bhi.n	8000cd6 <clearString+0xe>
    }
}
 8000cf4:	bf00      	nop
 8000cf6:	bf00      	nop
 8000cf8:	3710      	adds	r7, #16
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <clearLastCharacter>:

void clearLastCharacter(char *str) {
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b084      	sub	sp, #16
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
    // Get the length of the string
    int len = strlen(str);
 8000d06:	6878      	ldr	r0, [r7, #4]
 8000d08:	f7ff fa5e 	bl	80001c8 <strlen>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	60fb      	str	r3, [r7, #12]
    // If the string is empty, there's nothing to clear
    if (len == 0) {
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d006      	beq.n	8000d24 <clearLastCharacter+0x26>
        return;
    }
    // Set the last character of the string to null terminator
    str[len - 1] = '\0';
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	3b01      	subs	r3, #1
 8000d1a:	687a      	ldr	r2, [r7, #4]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	2200      	movs	r2, #0
 8000d20:	701a      	strb	r2, [r3, #0]
 8000d22:	e000      	b.n	8000d26 <clearLastCharacter+0x28>
        return;
 8000d24:	bf00      	nop
}
 8000d26:	3710      	adds	r7, #16
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <createFlashStr>:

char* createFlashStr(const char *data) {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b086      	sub	sp, #24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
    char *result = (char *)malloc(sizeof(char)); // Allocate memory for the result string
 8000d34:	2001      	movs	r0, #1
 8000d36:	f000 fd35 	bl	80017a4 <malloc>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	617b      	str	r3, [r7, #20]
    result[0] = '\0'; // Initialize the result string to empty
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	2200      	movs	r2, #0
 8000d42:	701a      	strb	r2, [r3, #0]
    int i = 0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	613b      	str	r3, [r7, #16]
    while (data[i] != '\0') {
 8000d48:	e073      	b.n	8000e32 <createFlashStr+0x106>
        if (data[i] == '#' && data[i + 1] >= '0' && data[i + 1] <= '9') {
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	687a      	ldr	r2, [r7, #4]
 8000d4e:	4413      	add	r3, r2
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	2b23      	cmp	r3, #35	; 0x23
 8000d54:	d125      	bne.n	8000da2 <createFlashStr+0x76>
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	687a      	ldr	r2, [r7, #4]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	2b2f      	cmp	r3, #47	; 0x2f
 8000d62:	d91e      	bls.n	8000da2 <createFlashStr+0x76>
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	3301      	adds	r3, #1
 8000d68:	687a      	ldr	r2, [r7, #4]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	2b39      	cmp	r3, #57	; 0x39
 8000d70:	d817      	bhi.n	8000da2 <createFlashStr+0x76>
            // If the current character is a hashtag followed by a number, add the number char to the result
            char numChar = getNumChar(data[i], data[i + 1]);
 8000d72:	693b      	ldr	r3, [r7, #16]
 8000d74:	687a      	ldr	r2, [r7, #4]
 8000d76:	4413      	add	r3, r2
 8000d78:	7818      	ldrb	r0, [r3, #0]
 8000d7a:	693b      	ldr	r3, [r7, #16]
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	687a      	ldr	r2, [r7, #4]
 8000d80:	4413      	add	r3, r2
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	4619      	mov	r1, r3
 8000d86:	f7ff ff3f 	bl	8000c08 <getNumChar>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	73fb      	strb	r3, [r7, #15]
            result = addCharToString(result, numChar);
 8000d8e:	7bfb      	ldrb	r3, [r7, #15]
 8000d90:	4619      	mov	r1, r3
 8000d92:	6978      	ldr	r0, [r7, #20]
 8000d94:	f7ff ff5e 	bl	8000c54 <addCharToString>
 8000d98:	6178      	str	r0, [r7, #20]
            i += 2; // Skip the hashtag and the number
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	3302      	adds	r3, #2
 8000d9e:	613b      	str	r3, [r7, #16]
        if (data[i] == '#' && data[i + 1] >= '0' && data[i + 1] <= '9') {
 8000da0:	e047      	b.n	8000e32 <createFlashStr+0x106>
        } else if (data[i] >= '0' && data[i] <= '9' && data[i + 1] >= '0' && data[i + 1] <= '9') {
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	687a      	ldr	r2, [r7, #4]
 8000da6:	4413      	add	r3, r2
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	2b2f      	cmp	r3, #47	; 0x2f
 8000dac:	d92f      	bls.n	8000e0e <createFlashStr+0xe2>
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	687a      	ldr	r2, [r7, #4]
 8000db2:	4413      	add	r3, r2
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	2b39      	cmp	r3, #57	; 0x39
 8000db8:	d829      	bhi.n	8000e0e <createFlashStr+0xe2>
 8000dba:	693b      	ldr	r3, [r7, #16]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	2b2f      	cmp	r3, #47	; 0x2f
 8000dc6:	d922      	bls.n	8000e0e <createFlashStr+0xe2>
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	3301      	adds	r3, #1
 8000dcc:	687a      	ldr	r2, [r7, #4]
 8000dce:	4413      	add	r3, r2
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	2b39      	cmp	r3, #57	; 0x39
 8000dd4:	d81b      	bhi.n	8000e0e <createFlashStr+0xe2>
            // If two consecutive characters are both numbers, treat them as representing a letter char
            char letter = (data[i] - '0') * 10 + (data[i + 1] - '0') + 'A' - 1;
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	687a      	ldr	r2, [r7, #4]
 8000dda:	4413      	add	r3, r2
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	461a      	mov	r2, r3
 8000de0:	0092      	lsls	r2, r2, #2
 8000de2:	4413      	add	r3, r2
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	b2da      	uxtb	r2, r3
 8000de8:	693b      	ldr	r3, [r7, #16]
 8000dea:	3301      	adds	r3, #1
 8000dec:	6879      	ldr	r1, [r7, #4]
 8000dee:	440b      	add	r3, r1
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	4413      	add	r3, r2
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	3330      	adds	r3, #48	; 0x30
 8000df8:	73bb      	strb	r3, [r7, #14]
            result = addCharToString(result, letter);
 8000dfa:	7bbb      	ldrb	r3, [r7, #14]
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	6978      	ldr	r0, [r7, #20]
 8000e00:	f7ff ff28 	bl	8000c54 <addCharToString>
 8000e04:	6178      	str	r0, [r7, #20]
            i += 2; // Skip the two numbers
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	3302      	adds	r3, #2
 8000e0a:	613b      	str	r3, [r7, #16]
        } else if (data[i] >= '0' && data[i] <= '9' && data[i + 1] >= '0' && data[i + 1] <= '9') {
 8000e0c:	e011      	b.n	8000e32 <createFlashStr+0x106>
        } else if (data[i] == '*') {
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	687a      	ldr	r2, [r7, #4]
 8000e12:	4413      	add	r3, r2
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	2b2a      	cmp	r3, #42	; 0x2a
 8000e18:	d108      	bne.n	8000e2c <createFlashStr+0x100>
            // If the current character is '*', add it to the result string
            result = addCharToString(result, '*');
 8000e1a:	212a      	movs	r1, #42	; 0x2a
 8000e1c:	6978      	ldr	r0, [r7, #20]
 8000e1e:	f7ff ff19 	bl	8000c54 <addCharToString>
 8000e22:	6178      	str	r0, [r7, #20]
            i++;
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	3301      	adds	r3, #1
 8000e28:	613b      	str	r3, [r7, #16]
 8000e2a:	e002      	b.n	8000e32 <createFlashStr+0x106>
        } else {
            // Ignore other characters
            i++;
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	613b      	str	r3, [r7, #16]
    while (data[i] != '\0') {
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	687a      	ldr	r2, [r7, #4]
 8000e36:	4413      	add	r3, r2
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d185      	bne.n	8000d4a <createFlashStr+0x1e>
        }
    }

    return result;
 8000e3e:	697b      	ldr	r3, [r7, #20]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3718      	adds	r7, #24
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <flash>:

void flash(char *str, GPIOx_ODR *pGpiodOutReg){
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	6039      	str	r1, [r7, #0]
	for (int i = 0; str[i] != '\0'; i++) {
 8000e52:	2300      	movs	r3, #0
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	e10e      	b.n	8001076 <flash+0x22e>
	       switch(str[i]){
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	687a      	ldr	r2, [r7, #4]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	3b2a      	subs	r3, #42	; 0x2a
 8000e62:	2b30      	cmp	r3, #48	; 0x30
 8000e64:	f200 80f9 	bhi.w	800105a <flash+0x212>
 8000e68:	a201      	add	r2, pc, #4	; (adr r2, 8000e70 <flash+0x28>)
 8000e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e6e:	bf00      	nop
 8000e70:	08001055 	.word	0x08001055
 8000e74:	0800105b 	.word	0x0800105b
 8000e78:	0800105b 	.word	0x0800105b
 8000e7c:	0800105b 	.word	0x0800105b
 8000e80:	0800105b 	.word	0x0800105b
 8000e84:	0800105b 	.word	0x0800105b
 8000e88:	0800104d 	.word	0x0800104d
 8000e8c:	08001005 	.word	0x08001005
 8000e90:	0800100d 	.word	0x0800100d
 8000e94:	08001015 	.word	0x08001015
 8000e98:	0800101d 	.word	0x0800101d
 8000e9c:	08001025 	.word	0x08001025
 8000ea0:	0800102d 	.word	0x0800102d
 8000ea4:	08001035 	.word	0x08001035
 8000ea8:	0800103d 	.word	0x0800103d
 8000eac:	08001045 	.word	0x08001045
 8000eb0:	0800105b 	.word	0x0800105b
 8000eb4:	0800105b 	.word	0x0800105b
 8000eb8:	0800105b 	.word	0x0800105b
 8000ebc:	0800105b 	.word	0x0800105b
 8000ec0:	0800105b 	.word	0x0800105b
 8000ec4:	0800105b 	.word	0x0800105b
 8000ec8:	0800105b 	.word	0x0800105b
 8000ecc:	08000f35 	.word	0x08000f35
 8000ed0:	08000f3d 	.word	0x08000f3d
 8000ed4:	08000f45 	.word	0x08000f45
 8000ed8:	08000f4d 	.word	0x08000f4d
 8000edc:	08000f55 	.word	0x08000f55
 8000ee0:	08000f5d 	.word	0x08000f5d
 8000ee4:	08000f65 	.word	0x08000f65
 8000ee8:	08000f6d 	.word	0x08000f6d
 8000eec:	08000f75 	.word	0x08000f75
 8000ef0:	08000f7d 	.word	0x08000f7d
 8000ef4:	08000f85 	.word	0x08000f85
 8000ef8:	08000f8d 	.word	0x08000f8d
 8000efc:	08000f95 	.word	0x08000f95
 8000f00:	08000f9d 	.word	0x08000f9d
 8000f04:	08000fa5 	.word	0x08000fa5
 8000f08:	08000fad 	.word	0x08000fad
 8000f0c:	08000fb5 	.word	0x08000fb5
 8000f10:	08000fbd 	.word	0x08000fbd
 8000f14:	08000fc5 	.word	0x08000fc5
 8000f18:	08000fcd 	.word	0x08000fcd
 8000f1c:	08000fd5 	.word	0x08000fd5
 8000f20:	08000fdd 	.word	0x08000fdd
 8000f24:	08000fe5 	.word	0x08000fe5
 8000f28:	08000fed 	.word	0x08000fed
 8000f2c:	08000ff5 	.word	0x08000ff5
 8000f30:	08000ffd 	.word	0x08000ffd
	       case 'A':
	    	   flash_A(pGpiodOutReg);
 8000f34:	6838      	ldr	r0, [r7, #0]
 8000f36:	f7ff fab3 	bl	80004a0 <flash_A>
	    	   break;
 8000f3a:	e099      	b.n	8001070 <flash+0x228>
	       case 'B':
	    	   flash_B(pGpiodOutReg);
 8000f3c:	6838      	ldr	r0, [r7, #0]
 8000f3e:	f7ff fac1 	bl	80004c4 <flash_B>
	    	   break;
 8000f42:	e095      	b.n	8001070 <flash+0x228>
	       case 'C':
	    	   flash_C(pGpiodOutReg);
 8000f44:	6838      	ldr	r0, [r7, #0]
 8000f46:	f7ff fad9 	bl	80004fc <flash_C>
	    	   break;
 8000f4a:	e091      	b.n	8001070 <flash+0x228>
	       case 'D':
	    	   flash_D(pGpiodOutReg);
 8000f4c:	6838      	ldr	r0, [r7, #0]
 8000f4e:	f7ff faf1 	bl	8000534 <flash_D>
	    	   break;
 8000f52:	e08d      	b.n	8001070 <flash+0x228>
	       case 'E':
	    	   flash_E(pGpiodOutReg);
 8000f54:	6838      	ldr	r0, [r7, #0]
 8000f56:	f7ff fb04 	bl	8000562 <flash_E>
	    	   break;
 8000f5a:	e089      	b.n	8001070 <flash+0x228>
	       case 'F':
	    	   flash_F(pGpiodOutReg);
 8000f5c:	6838      	ldr	r0, [r7, #0]
 8000f5e:	f7ff fb0d 	bl	800057c <flash_F>
	    	   break;
 8000f62:	e085      	b.n	8001070 <flash+0x228>
	       case 'G':
	    	   flash_G(pGpiodOutReg);
 8000f64:	6838      	ldr	r0, [r7, #0]
 8000f66:	f7ff fb25 	bl	80005b4 <flash_G>
	    	   break;
 8000f6a:	e081      	b.n	8001070 <flash+0x228>
	       case 'H':
	    	   flash_H(pGpiodOutReg);
 8000f6c:	6838      	ldr	r0, [r7, #0]
 8000f6e:	f7ff fb38 	bl	80005e2 <flash_H>
	    	   break;
 8000f72:	e07d      	b.n	8001070 <flash+0x228>
	       case 'I':
	    	   flash_I(pGpiodOutReg);
 8000f74:	6838      	ldr	r0, [r7, #0]
 8000f76:	f7ff fb50 	bl	800061a <flash_I>
	    	   break;
 8000f7a:	e079      	b.n	8001070 <flash+0x228>
	       case 'J':
	    	   flash_J(pGpiodOutReg);
 8000f7c:	6838      	ldr	r0, [r7, #0]
 8000f7e:	f7ff fb5e 	bl	800063e <flash_J>
	    	   break;
 8000f82:	e075      	b.n	8001070 <flash+0x228>
	       case 'K':
	    	   flash_K(pGpiodOutReg);
 8000f84:	6838      	ldr	r0, [r7, #0]
 8000f86:	f7ff fb76 	bl	8000676 <flash_K>
	    	   break;
 8000f8a:	e071      	b.n	8001070 <flash+0x228>
	       case 'L':
	    	   flash_L(pGpiodOutReg);
 8000f8c:	6838      	ldr	r0, [r7, #0]
 8000f8e:	f7ff fb89 	bl	80006a4 <flash_L>
	    	   break;
 8000f92:	e06d      	b.n	8001070 <flash+0x228>
	       case 'M':
	    	   flash_M(pGpiodOutReg);
 8000f94:	6838      	ldr	r0, [r7, #0]
 8000f96:	f7ff fba1 	bl	80006dc <flash_M>
	    	   break;
 8000f9a:	e069      	b.n	8001070 <flash+0x228>
	       case 'N':
	    	   flash_N(pGpiodOutReg);
 8000f9c:	6838      	ldr	r0, [r7, #0]
 8000f9e:	f7ff fbaf 	bl	8000700 <flash_N>
	    	   break;
 8000fa2:	e065      	b.n	8001070 <flash+0x228>
	       case 'O':
	    	   flash_O(pGpiodOutReg);
 8000fa4:	6838      	ldr	r0, [r7, #0]
 8000fa6:	f7ff fbbd 	bl	8000724 <flash_O>
	    	   break;
 8000faa:	e061      	b.n	8001070 <flash+0x228>
	       case 'P':
	    	   flash_P(pGpiodOutReg);
 8000fac:	6838      	ldr	r0, [r7, #0]
 8000fae:	f7ff fbd0 	bl	8000752 <flash_P>
	    	   break;
 8000fb2:	e05d      	b.n	8001070 <flash+0x228>
	       case 'Q':
	    	   flash_Q(pGpiodOutReg);
 8000fb4:	6838      	ldr	r0, [r7, #0]
 8000fb6:	f7ff fbe8 	bl	800078a <flash_Q>
	    	   break;
 8000fba:	e059      	b.n	8001070 <flash+0x228>
	       case 'R':
	    	   flash_R(pGpiodOutReg);
 8000fbc:	6838      	ldr	r0, [r7, #0]
 8000fbe:	f7ff fc00 	bl	80007c2 <flash_R>
	    	   break;
 8000fc2:	e055      	b.n	8001070 <flash+0x228>
	       case 'S':
	    	   flash_S(pGpiodOutReg);
 8000fc4:	6838      	ldr	r0, [r7, #0]
 8000fc6:	f7ff fc13 	bl	80007f0 <flash_S>
	    	   break;
 8000fca:	e051      	b.n	8001070 <flash+0x228>
	       case 'T':
	    	   flash_T(pGpiodOutReg);
 8000fcc:	6838      	ldr	r0, [r7, #0]
 8000fce:	f7ff fc26 	bl	800081e <flash_T>
	    	   break;
 8000fd2:	e04d      	b.n	8001070 <flash+0x228>
	       case 'U':
	    	   flash_U(pGpiodOutReg);
 8000fd4:	6838      	ldr	r0, [r7, #0]
 8000fd6:	f7ff fc2f 	bl	8000838 <flash_U>
	    	   break;
 8000fda:	e049      	b.n	8001070 <flash+0x228>
	       case 'V':
	    	   flash_V(pGpiodOutReg);
 8000fdc:	6838      	ldr	r0, [r7, #0]
 8000fde:	f7ff fc42 	bl	8000866 <flash_V>
	    	   break;
 8000fe2:	e045      	b.n	8001070 <flash+0x228>
	       case 'W':
	    	   flash_W(pGpiodOutReg);
 8000fe4:	6838      	ldr	r0, [r7, #0]
 8000fe6:	f7ff fc5a 	bl	800089e <flash_W>
	    	   break;
 8000fea:	e041      	b.n	8001070 <flash+0x228>
	       case 'X':
	    	   flash_X(pGpiodOutReg);
 8000fec:	6838      	ldr	r0, [r7, #0]
 8000fee:	f7ff fc6d 	bl	80008cc <flash_X>
	    	   break;
 8000ff2:	e03d      	b.n	8001070 <flash+0x228>
	       case 'Y':
	    	   flash_Y(pGpiodOutReg);
 8000ff4:	6838      	ldr	r0, [r7, #0]
 8000ff6:	f7ff fc85 	bl	8000904 <flash_Y>
	    	   break;
 8000ffa:	e039      	b.n	8001070 <flash+0x228>
	       case 'Z':
	    	   flash_Z(pGpiodOutReg);
 8000ffc:	6838      	ldr	r0, [r7, #0]
 8000ffe:	f7ff fc9d 	bl	800093c <flash_Z>
	    	   break;
 8001002:	e035      	b.n	8001070 <flash+0x228>
	       case '1':
	    	   flash_1(pGpiodOutReg);
 8001004:	6838      	ldr	r0, [r7, #0]
 8001006:	f7ff fcb5 	bl	8000974 <flash_1>
	    	   break;
 800100a:	e031      	b.n	8001070 <flash+0x228>
	       case '2':
	    	   flash_2(pGpiodOutReg);
 800100c:	6838      	ldr	r0, [r7, #0]
 800100e:	f7ff fcd2 	bl	80009b6 <flash_2>
	    	   break;
 8001012:	e02d      	b.n	8001070 <flash+0x228>
	       case '3':
	    	   flash_3(pGpiodOutReg);
 8001014:	6838      	ldr	r0, [r7, #0]
 8001016:	f7ff fcef 	bl	80009f8 <flash_3>
	    	   break;
 800101a:	e029      	b.n	8001070 <flash+0x228>
	       case '4':
	    	   flash_4(pGpiodOutReg);
 800101c:	6838      	ldr	r0, [r7, #0]
 800101e:	f7ff fd0c 	bl	8000a3a <flash_4>
	    	   break;
 8001022:	e025      	b.n	8001070 <flash+0x228>
	       case '5':
	    	   flash_5(pGpiodOutReg);
 8001024:	6838      	ldr	r0, [r7, #0]
 8001026:	f7ff fd29 	bl	8000a7c <flash_5>
	    	   break;
 800102a:	e021      	b.n	8001070 <flash+0x228>
	       case '6':
	    	   flash_6(pGpiodOutReg);
 800102c:	6838      	ldr	r0, [r7, #0]
 800102e:	f7ff fd46 	bl	8000abe <flash_6>
	    	   break;
 8001032:	e01d      	b.n	8001070 <flash+0x228>
	       case '7':
	    	   flash_7(pGpiodOutReg);
 8001034:	6838      	ldr	r0, [r7, #0]
 8001036:	f7ff fd63 	bl	8000b00 <flash_7>
	    	   break;
 800103a:	e019      	b.n	8001070 <flash+0x228>
	       case '8':
	    	   flash_8(pGpiodOutReg);
 800103c:	6838      	ldr	r0, [r7, #0]
 800103e:	f7ff fd80 	bl	8000b42 <flash_8>
	    	   break;
 8001042:	e015      	b.n	8001070 <flash+0x228>
	       case '9':
	    	   flash_9(pGpiodOutReg);
 8001044:	6838      	ldr	r0, [r7, #0]
 8001046:	f7ff fd9d 	bl	8000b84 <flash_9>
	    	   break;
 800104a:	e011      	b.n	8001070 <flash+0x228>
	       case '0':
	    	   flash_0(pGpiodOutReg);
 800104c:	6838      	ldr	r0, [r7, #0]
 800104e:	f7ff fdba 	bl	8000bc6 <flash_0>
	    	   break;
 8001052:	e00d      	b.n	8001070 <flash+0x228>
	       case '*':
	       	   word_delay();
 8001054:	f7ff f8ec 	bl	8000230 <word_delay>
	       	   break;
 8001058:	e00a      	b.n	8001070 <flash+0x228>
	       default:
	    	   fprintf(stderr, "Unknown character case in switch.\n");
 800105a:	4b0d      	ldr	r3, [pc, #52]	; (8001090 <flash+0x248>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	2222      	movs	r2, #34	; 0x22
 8001062:	2101      	movs	r1, #1
 8001064:	480b      	ldr	r0, [pc, #44]	; (8001094 <flash+0x24c>)
 8001066:	f000 fd5f 	bl	8001b28 <fwrite>
	    	   errState = 4;
 800106a:	4b0b      	ldr	r3, [pc, #44]	; (8001098 <flash+0x250>)
 800106c:	2204      	movs	r2, #4
 800106e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; str[i] != '\0'; i++) {
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	3301      	adds	r3, #1
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	4413      	add	r3, r2
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	2b00      	cmp	r3, #0
 8001080:	f47f aeea 	bne.w	8000e58 <flash+0x10>
	       }
	    }
}
 8001084:	bf00      	nop
 8001086:	bf00      	nop
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000058 	.word	0x20000058
 8001094:	0800222c 	.word	0x0800222c
 8001098:	20000078 	.word	0x20000078

0800109c <main>:
#include "functions.h"

uint8_t errState = 0;

int main(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b088      	sub	sp, #32
 80010a0:	af00      	add	r7, sp, #0
	//uint8_t breakHandler = 0;
	char *instruction_str = (char *)malloc(301 * sizeof(char)); // Including space for the null terminator '\0'
 80010a2:	f240 102d 	movw	r0, #301	; 0x12d
 80010a6:	f000 fb7d 	bl	80017a4 <malloc>
 80010aa:	4603      	mov	r3, r0
 80010ac:	61fb      	str	r3, [r7, #28]

    if (instruction_str == NULL) {
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d10c      	bne.n	80010ce <main+0x32>
       fprintf(stderr, "Memory allocation failed.\n");
 80010b4:	4b73      	ldr	r3, [pc, #460]	; (8001284 <main+0x1e8>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	68db      	ldr	r3, [r3, #12]
 80010ba:	221a      	movs	r2, #26
 80010bc:	2101      	movs	r1, #1
 80010be:	4872      	ldr	r0, [pc, #456]	; (8001288 <main+0x1ec>)
 80010c0:	f000 fd32 	bl	8001b28 <fwrite>
       errState = 5;
 80010c4:	4b71      	ldr	r3, [pc, #452]	; (800128c <main+0x1f0>)
 80010c6:	2205      	movs	r2, #5
 80010c8:	701a      	strb	r2, [r3, #0]
        return 1; // Return error code indicating failure
 80010ca:	2301      	movs	r3, #1
 80010cc:	e25b      	b.n	8001586 <main+0x4ea>
    }

	char *flash_str = (char *)malloc(101 * sizeof(char)); // Including space for the null terminator '\0'
 80010ce:	2065      	movs	r0, #101	; 0x65
 80010d0:	f000 fb68 	bl	80017a4 <malloc>
 80010d4:	4603      	mov	r3, r0
 80010d6:	61bb      	str	r3, [r7, #24]

    if (flash_str == NULL) {
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d10c      	bne.n	80010f8 <main+0x5c>
    	fprintf(stderr, "Memory allocation failed.\n");
 80010de:	4b69      	ldr	r3, [pc, #420]	; (8001284 <main+0x1e8>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	221a      	movs	r2, #26
 80010e6:	2101      	movs	r1, #1
 80010e8:	4867      	ldr	r0, [pc, #412]	; (8001288 <main+0x1ec>)
 80010ea:	f000 fd1d 	bl	8001b28 <fwrite>
    	errState = 5;
 80010ee:	4b67      	ldr	r3, [pc, #412]	; (800128c <main+0x1f0>)
 80010f0:	2205      	movs	r2, #5
 80010f2:	701a      	strb	r2, [r3, #0]
        return 1; // Return error code indicating failure
 80010f4:	2301      	movs	r3, #1
 80010f6:	e246      	b.n	8001586 <main+0x4ea>
    }

	RCC_AHB1ENR volatile *pRccClockReg;
	pRccClockReg = ADDR_RCC_AHB1ENR;
 80010f8:	4b65      	ldr	r3, [pc, #404]	; (8001290 <main+0x1f4>)
 80010fa:	613b      	str	r3, [r7, #16]

	GPIOx_MODER volatile *pGpiodModeReg;
	pGpiodModeReg = ADDR_GPIOD_MODER;
 80010fc:	4b65      	ldr	r3, [pc, #404]	; (8001294 <main+0x1f8>)
 80010fe:	60fb      	str	r3, [r7, #12]

	GPIOx_ODR  *pGpiodOutReg;
	pGpiodOutReg = ADDR_GPIOD_ODR;
 8001100:	4b65      	ldr	r3, [pc, #404]	; (8001298 <main+0x1fc>)
 8001102:	60bb      	str	r3, [r7, #8]

	GPIOx_IDR volatile *pGpiodInReg;
	pGpiodInReg = ADDR_GPIOD_IDR;
 8001104:	4b65      	ldr	r3, [pc, #404]	; (800129c <main+0x200>)
 8001106:	607b      	str	r3, [r7, #4]

	GPIOx_PUPDR volatile *pGpiodPullUpReg;
	pGpiodPullUpReg = ADDR_GPIOD_PUPDR;
 8001108:	4b65      	ldr	r3, [pc, #404]	; (80012a0 <main+0x204>)
 800110a:	603b      	str	r3, [r7, #0]


	pRccClockReg->gpiod_en = STATE_ENABLED;
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	6813      	ldr	r3, [r2, #0]
 8001110:	f043 0308 	orr.w	r3, r3, #8
 8001114:	6013      	str	r3, [r2, #0]
	//Output for PD0 - PD3 Columns
	pGpiodModeReg->moder_0 = MODE_OUTPUT;
 8001116:	68fa      	ldr	r2, [r7, #12]
 8001118:	6813      	ldr	r3, [r2, #0]
 800111a:	2101      	movs	r1, #1
 800111c:	f361 0301 	bfi	r3, r1, #0, #2
 8001120:	6013      	str	r3, [r2, #0]
	pGpiodModeReg->moder_1 = MODE_OUTPUT;
 8001122:	68fa      	ldr	r2, [r7, #12]
 8001124:	6813      	ldr	r3, [r2, #0]
 8001126:	2101      	movs	r1, #1
 8001128:	f361 0383 	bfi	r3, r1, #2, #2
 800112c:	6013      	str	r3, [r2, #0]
	pGpiodModeReg->moder_2 = MODE_OUTPUT;
 800112e:	68fa      	ldr	r2, [r7, #12]
 8001130:	6813      	ldr	r3, [r2, #0]
 8001132:	2101      	movs	r1, #1
 8001134:	f361 1305 	bfi	r3, r1, #4, #2
 8001138:	6013      	str	r3, [r2, #0]
	pGpiodModeReg->moder_3 = MODE_OUTPUT;
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	6813      	ldr	r3, [r2, #0]
 800113e:	2101      	movs	r1, #1
 8001140:	f361 1387 	bfi	r3, r1, #6, #2
 8001144:	6013      	str	r3, [r2, #0]
	//Input for PD8 - PD11 Rows
	pGpiodModeReg->moder_8 = MODE_INPUT;
 8001146:	68fa      	ldr	r2, [r7, #12]
 8001148:	6813      	ldr	r3, [r2, #0]
 800114a:	f36f 4311 	bfc	r3, #16, #2
 800114e:	6013      	str	r3, [r2, #0]
	pGpiodModeReg->moder_9 = MODE_INPUT;
 8001150:	68fa      	ldr	r2, [r7, #12]
 8001152:	6813      	ldr	r3, [r2, #0]
 8001154:	f36f 4393 	bfc	r3, #18, #2
 8001158:	6013      	str	r3, [r2, #0]
	pGpiodModeReg->moder_10 = MODE_INPUT;
 800115a:	68fa      	ldr	r2, [r7, #12]
 800115c:	6813      	ldr	r3, [r2, #0]
 800115e:	f36f 5315 	bfc	r3, #20, #2
 8001162:	6013      	str	r3, [r2, #0]
	pGpiodModeReg->moder_11 = MODE_INPUT;
 8001164:	68fa      	ldr	r2, [r7, #12]
 8001166:	6813      	ldr	r3, [r2, #0]
 8001168:	f36f 5397 	bfc	r3, #22, #2
 800116c:	6013      	str	r3, [r2, #0]
	//Output for PD12 - PD15 LEDs
	pGpiodModeReg->moder_12 = MODE_OUTPUT;
 800116e:	68fa      	ldr	r2, [r7, #12]
 8001170:	6813      	ldr	r3, [r2, #0]
 8001172:	2101      	movs	r1, #1
 8001174:	f361 6319 	bfi	r3, r1, #24, #2
 8001178:	6013      	str	r3, [r2, #0]
	pGpiodModeReg->moder_13 = MODE_OUTPUT;
 800117a:	68fa      	ldr	r2, [r7, #12]
 800117c:	6813      	ldr	r3, [r2, #0]
 800117e:	2101      	movs	r1, #1
 8001180:	f361 639b 	bfi	r3, r1, #26, #2
 8001184:	6013      	str	r3, [r2, #0]
	pGpiodModeReg->moder_14 = MODE_OUTPUT;
 8001186:	68fa      	ldr	r2, [r7, #12]
 8001188:	6813      	ldr	r3, [r2, #0]
 800118a:	2101      	movs	r1, #1
 800118c:	f361 731d 	bfi	r3, r1, #28, #2
 8001190:	6013      	str	r3, [r2, #0]
	pGpiodModeReg->moder_15 = MODE_OUTPUT;
 8001192:	68fa      	ldr	r2, [r7, #12]
 8001194:	6813      	ldr	r3, [r2, #0]
 8001196:	2101      	movs	r1, #1
 8001198:	f361 739f 	bfi	r3, r1, #30, #2
 800119c:	6013      	str	r3, [r2, #0]
	// Pull up registers for PD8-PD11
	pGpiodPullUpReg->pupdr_8 = STATE_ENABLED;
 800119e:	683a      	ldr	r2, [r7, #0]
 80011a0:	6813      	ldr	r3, [r2, #0]
 80011a2:	2101      	movs	r1, #1
 80011a4:	f361 4311 	bfi	r3, r1, #16, #2
 80011a8:	6013      	str	r3, [r2, #0]
	pGpiodPullUpReg->pupdr_9 = STATE_ENABLED;
 80011aa:	683a      	ldr	r2, [r7, #0]
 80011ac:	6813      	ldr	r3, [r2, #0]
 80011ae:	2101      	movs	r1, #1
 80011b0:	f361 4393 	bfi	r3, r1, #18, #2
 80011b4:	6013      	str	r3, [r2, #0]
	pGpiodPullUpReg->pupdr_10 = STATE_ENABLED;
 80011b6:	683a      	ldr	r2, [r7, #0]
 80011b8:	6813      	ldr	r3, [r2, #0]
 80011ba:	2101      	movs	r1, #1
 80011bc:	f361 5315 	bfi	r3, r1, #20, #2
 80011c0:	6013      	str	r3, [r2, #0]
	pGpiodPullUpReg->pupdr_11 = STATE_ENABLED;
 80011c2:	683a      	ldr	r2, [r7, #0]
 80011c4:	6813      	ldr	r3, [r2, #0]
 80011c6:	2101      	movs	r1, #1
 80011c8:	f361 5397 	bfi	r3, r1, #22, #2
 80011cc:	6013      	str	r3, [r2, #0]

	//Check which button is pressed based on the Row and Column States
	while(1){
	// make rows high
	// clear R1
	pGpiodOutReg->odr_0 = STATE_LOW;
 80011ce:	68ba      	ldr	r2, [r7, #8]
 80011d0:	7813      	ldrb	r3, [r2, #0]
 80011d2:	f36f 0300 	bfc	r3, #0, #1
 80011d6:	7013      	strb	r3, [r2, #0]
	pGpiodOutReg->odr_1 = STATE_HIGH;
 80011d8:	68ba      	ldr	r2, [r7, #8]
 80011da:	7813      	ldrb	r3, [r2, #0]
 80011dc:	f043 0302 	orr.w	r3, r3, #2
 80011e0:	7013      	strb	r3, [r2, #0]
	pGpiodOutReg->odr_2 = STATE_HIGH;
 80011e2:	68ba      	ldr	r2, [r7, #8]
 80011e4:	7813      	ldrb	r3, [r2, #0]
 80011e6:	f043 0304 	orr.w	r3, r3, #4
 80011ea:	7013      	strb	r3, [r2, #0]
	pGpiodOutReg->odr_3 = STATE_HIGH;
 80011ec:	68ba      	ldr	r2, [r7, #8]
 80011ee:	7813      	ldrb	r3, [r2, #0]
 80011f0:	f043 0308 	orr.w	r3, r3, #8
 80011f4:	7013      	strb	r3, [r2, #0]


	// C1 PD8
	if(!(pGpiodInReg->idr_8 == STATE_HIGH)){
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f3c3 2300 	ubfx	r3, r3, #8, #1
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	2b01      	cmp	r3, #1
 8001202:	d00a      	beq.n	800121a <main+0x17e>

				blue_dah(pGpiodOutReg);
 8001204:	68b8      	ldr	r0, [r7, #8]
 8001206:	f7ff f869 	bl	80002dc <blue_dah>
				printf("1\n");
 800120a:	4826      	ldr	r0, [pc, #152]	; (80012a4 <main+0x208>)
 800120c:	f000 fcee 	bl	8001bec <puts>
				instruction_str = addCharToString(instruction_str,'1');
 8001210:	2131      	movs	r1, #49	; 0x31
 8001212:	69f8      	ldr	r0, [r7, #28]
 8001214:	f7ff fd1e 	bl	8000c54 <addCharToString>
 8001218:	61f8      	str	r0, [r7, #28]
	}
	// C2 PD9
	if(!(pGpiodInReg->idr_9 == STATE_HIGH)){
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f3c3 2340 	ubfx	r3, r3, #9, #1
 8001222:	b2db      	uxtb	r3, r3
 8001224:	2b01      	cmp	r3, #1
 8001226:	d00a      	beq.n	800123e <main+0x1a2>

				blue_dah(pGpiodOutReg);
 8001228:	68b8      	ldr	r0, [r7, #8]
 800122a:	f7ff f857 	bl	80002dc <blue_dah>
				printf("2\n");
 800122e:	481e      	ldr	r0, [pc, #120]	; (80012a8 <main+0x20c>)
 8001230:	f000 fcdc 	bl	8001bec <puts>
				instruction_str = addCharToString(instruction_str,'2');
 8001234:	2132      	movs	r1, #50	; 0x32
 8001236:	69f8      	ldr	r0, [r7, #28]
 8001238:	f7ff fd0c 	bl	8000c54 <addCharToString>
 800123c:	61f8      	str	r0, [r7, #28]
			}
	// C3 PD10
	if(!(pGpiodInReg->idr_10 == STATE_HIGH)){
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f3c3 2380 	ubfx	r3, r3, #10, #1
 8001246:	b2db      	uxtb	r3, r3
 8001248:	2b01      	cmp	r3, #1
 800124a:	d00a      	beq.n	8001262 <main+0x1c6>
				blue_dah(pGpiodOutReg);
 800124c:	68b8      	ldr	r0, [r7, #8]
 800124e:	f7ff f845 	bl	80002dc <blue_dah>
				printf("3\n");
 8001252:	4816      	ldr	r0, [pc, #88]	; (80012ac <main+0x210>)
 8001254:	f000 fcca 	bl	8001bec <puts>
				instruction_str = addCharToString(instruction_str,'3');
 8001258:	2133      	movs	r1, #51	; 0x33
 800125a:	69f8      	ldr	r0, [r7, #28]
 800125c:	f7ff fcfa 	bl	8000c54 <addCharToString>
 8001260:	61f8      	str	r0, [r7, #28]

			}
	// C4 PD11
	if(!(pGpiodInReg->idr_11 == STATE_HIGH)){
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f3c3 23c0 	ubfx	r3, r3, #11, #1
 800126a:	b2db      	uxtb	r3, r3
 800126c:	2b01      	cmp	r3, #1
 800126e:	d05c      	beq.n	800132a <main+0x28e>
		// Performs transformation operations of the instruction string and executes the flash string in morse code flashes
				blue_dah(pGpiodOutReg);
 8001270:	68b8      	ldr	r0, [r7, #8]
 8001272:	f7ff f833 	bl	80002dc <blue_dah>
				printf("A\n");
 8001276:	480e      	ldr	r0, [pc, #56]	; (80012b0 <main+0x214>)
 8001278:	f000 fcb8 	bl	8001bec <puts>
				for (int i = 0; i < strlen(instruction_str); i++) {
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]
 8001280:	e038      	b.n	80012f4 <main+0x258>
 8001282:	bf00      	nop
 8001284:	20000058 	.word	0x20000058
 8001288:	08002210 	.word	0x08002210
 800128c:	20000078 	.word	0x20000078
 8001290:	40023830 	.word	0x40023830
 8001294:	40020c00 	.word	0x40020c00
 8001298:	40020c14 	.word	0x40020c14
 800129c:	40020c10 	.word	0x40020c10
 80012a0:	40020c0c 	.word	0x40020c0c
 80012a4:	08002250 	.word	0x08002250
 80012a8:	08002254 	.word	0x08002254
 80012ac:	08002258 	.word	0x08002258
 80012b0:	0800225c 	.word	0x0800225c
				        if (!(instruction_str[i] >= '0' && instruction_str[i] <= '9') && instruction_str[i] != '#' && instruction_str[i] != '*') {
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	69fa      	ldr	r2, [r7, #28]
 80012b8:	4413      	add	r3, r2
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b2f      	cmp	r3, #47	; 0x2f
 80012be:	d905      	bls.n	80012cc <main+0x230>
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	69fa      	ldr	r2, [r7, #28]
 80012c4:	4413      	add	r3, r2
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b39      	cmp	r3, #57	; 0x39
 80012ca:	d910      	bls.n	80012ee <main+0x252>
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	69fa      	ldr	r2, [r7, #28]
 80012d0:	4413      	add	r3, r2
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2b23      	cmp	r3, #35	; 0x23
 80012d6:	d00a      	beq.n	80012ee <main+0x252>
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	69fa      	ldr	r2, [r7, #28]
 80012dc:	4413      	add	r3, r2
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2b2a      	cmp	r3, #42	; 0x2a
 80012e2:	d004      	beq.n	80012ee <main+0x252>
				        	instruction_str[i] = '\0'; // Replace junk characters with null terminators
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	69fa      	ldr	r2, [r7, #28]
 80012e8:	4413      	add	r3, r2
 80012ea:	2200      	movs	r2, #0
 80012ec:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < strlen(instruction_str); i++) {
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	3301      	adds	r3, #1
 80012f2:	617b      	str	r3, [r7, #20]
 80012f4:	69f8      	ldr	r0, [r7, #28]
 80012f6:	f7fe ff67 	bl	80001c8 <strlen>
 80012fa:	4602      	mov	r2, r0
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	429a      	cmp	r2, r3
 8001300:	d8d8      	bhi.n	80012b4 <main+0x218>
				        }
				    }
				flash_str = createFlashStr(instruction_str);
 8001302:	69f8      	ldr	r0, [r7, #28]
 8001304:	f7ff fd12 	bl	8000d2c <createFlashStr>
 8001308:	61b8      	str	r0, [r7, #24]
				flash(flash_str,pGpiodOutReg);
 800130a:	68b9      	ldr	r1, [r7, #8]
 800130c:	69b8      	ldr	r0, [r7, #24]
 800130e:	f7ff fd9b 	bl	8000e48 <flash>

				    // Print the modified string containing only the actual string
				    printf("%s\n", instruction_str);
 8001312:	69f8      	ldr	r0, [r7, #28]
 8001314:	f000 fc6a 	bl	8001bec <puts>
				    printf("%s\n", flash_str);
 8001318:	69b8      	ldr	r0, [r7, #24]
 800131a:	f000 fc67 	bl	8001bec <puts>

				    clearString(instruction_str);
 800131e:	69f8      	ldr	r0, [r7, #28]
 8001320:	f7ff fcd2 	bl	8000cc8 <clearString>
				    clearString(flash_str);
 8001324:	69b8      	ldr	r0, [r7, #24]
 8001326:	f7ff fccf 	bl	8000cc8 <clearString>

			}
	//
	// make rows high
	// clear R1
	pGpiodOutReg->odr_0 = STATE_HIGH;
 800132a:	68ba      	ldr	r2, [r7, #8]
 800132c:	7813      	ldrb	r3, [r2, #0]
 800132e:	f043 0301 	orr.w	r3, r3, #1
 8001332:	7013      	strb	r3, [r2, #0]
	pGpiodOutReg->odr_1 = STATE_LOW;
 8001334:	68ba      	ldr	r2, [r7, #8]
 8001336:	7813      	ldrb	r3, [r2, #0]
 8001338:	f36f 0341 	bfc	r3, #1, #1
 800133c:	7013      	strb	r3, [r2, #0]
	// C1 PD8
	if(!(pGpiodInReg->idr_8 == STATE_HIGH)){
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f3c3 2300 	ubfx	r3, r3, #8, #1
 8001346:	b2db      	uxtb	r3, r3
 8001348:	2b01      	cmp	r3, #1
 800134a:	d00a      	beq.n	8001362 <main+0x2c6>


				blue_dah(pGpiodOutReg);
 800134c:	68b8      	ldr	r0, [r7, #8]
 800134e:	f7fe ffc5 	bl	80002dc <blue_dah>
				printf("4\n");
 8001352:	488f      	ldr	r0, [pc, #572]	; (8001590 <main+0x4f4>)
 8001354:	f000 fc4a 	bl	8001bec <puts>
				instruction_str = addCharToString(instruction_str,'4');
 8001358:	2134      	movs	r1, #52	; 0x34
 800135a:	69f8      	ldr	r0, [r7, #28]
 800135c:	f7ff fc7a 	bl	8000c54 <addCharToString>
 8001360:	61f8      	str	r0, [r7, #28]
	}
	// C2 PD9
	if(!(pGpiodInReg->idr_9 == STATE_HIGH)){
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f3c3 2340 	ubfx	r3, r3, #9, #1
 800136a:	b2db      	uxtb	r3, r3
 800136c:	2b01      	cmp	r3, #1
 800136e:	d00a      	beq.n	8001386 <main+0x2ea>


				blue_dah(pGpiodOutReg);
 8001370:	68b8      	ldr	r0, [r7, #8]
 8001372:	f7fe ffb3 	bl	80002dc <blue_dah>
				printf("5\n");
 8001376:	4887      	ldr	r0, [pc, #540]	; (8001594 <main+0x4f8>)
 8001378:	f000 fc38 	bl	8001bec <puts>
				instruction_str = addCharToString(instruction_str,'5');
 800137c:	2135      	movs	r1, #53	; 0x35
 800137e:	69f8      	ldr	r0, [r7, #28]
 8001380:	f7ff fc68 	bl	8000c54 <addCharToString>
 8001384:	61f8      	str	r0, [r7, #28]
			}
	// C3 PD10
	if(!(pGpiodInReg->idr_10 == STATE_HIGH)){
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f3c3 2380 	ubfx	r3, r3, #10, #1
 800138e:	b2db      	uxtb	r3, r3
 8001390:	2b01      	cmp	r3, #1
 8001392:	d00a      	beq.n	80013aa <main+0x30e>

				blue_dah(pGpiodOutReg);
 8001394:	68b8      	ldr	r0, [r7, #8]
 8001396:	f7fe ffa1 	bl	80002dc <blue_dah>
				printf("6\n");
 800139a:	487f      	ldr	r0, [pc, #508]	; (8001598 <main+0x4fc>)
 800139c:	f000 fc26 	bl	8001bec <puts>
				instruction_str = addCharToString(instruction_str,'6');
 80013a0:	2136      	movs	r1, #54	; 0x36
 80013a2:	69f8      	ldr	r0, [r7, #28]
 80013a4:	f7ff fc56 	bl	8000c54 <addCharToString>
 80013a8:	61f8      	str	r0, [r7, #28]

			}
	// C4 PD11
	if(!(pGpiodInReg->idr_11 == STATE_HIGH)){
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f3c3 23c0 	ubfx	r3, r3, #11, #1
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d00e      	beq.n	80013d6 <main+0x33a>
		// Acts as a reset
				reset_flash(pGpiodOutReg);
 80013b8:	68b8      	ldr	r0, [r7, #8]
 80013ba:	f7ff f80b 	bl	80003d4 <reset_flash>
				printf("B\n");
 80013be:	4877      	ldr	r0, [pc, #476]	; (800159c <main+0x500>)
 80013c0:	f000 fc14 	bl	8001bec <puts>
				clearString(instruction_str);
 80013c4:	69f8      	ldr	r0, [r7, #28]
 80013c6:	f7ff fc7f 	bl	8000cc8 <clearString>
				clearString(flash_str);
 80013ca:	69b8      	ldr	r0, [r7, #24]
 80013cc:	f7ff fc7c 	bl	8000cc8 <clearString>
				errState = 0;
 80013d0:	4b73      	ldr	r3, [pc, #460]	; (80015a0 <main+0x504>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	701a      	strb	r2, [r3, #0]
			}
	//
	// make rows high
	// clear R1

	pGpiodOutReg->odr_1 = STATE_HIGH;
 80013d6:	68ba      	ldr	r2, [r7, #8]
 80013d8:	7813      	ldrb	r3, [r2, #0]
 80013da:	f043 0302 	orr.w	r3, r3, #2
 80013de:	7013      	strb	r3, [r2, #0]
	pGpiodOutReg->odr_2 = STATE_LOW;
 80013e0:	68ba      	ldr	r2, [r7, #8]
 80013e2:	7813      	ldrb	r3, [r2, #0]
 80013e4:	f36f 0382 	bfc	r3, #2, #1
 80013e8:	7013      	strb	r3, [r2, #0]


	// C1 PD8
	if(!(pGpiodInReg->idr_8 == STATE_HIGH)){
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f3c3 2300 	ubfx	r3, r3, #8, #1
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d00a      	beq.n	800140e <main+0x372>

				blue_dah(pGpiodOutReg);
 80013f8:	68b8      	ldr	r0, [r7, #8]
 80013fa:	f7fe ff6f 	bl	80002dc <blue_dah>
				printf("7\n");
 80013fe:	4869      	ldr	r0, [pc, #420]	; (80015a4 <main+0x508>)
 8001400:	f000 fbf4 	bl	8001bec <puts>
				instruction_str = addCharToString(instruction_str,'7');
 8001404:	2137      	movs	r1, #55	; 0x37
 8001406:	69f8      	ldr	r0, [r7, #28]
 8001408:	f7ff fc24 	bl	8000c54 <addCharToString>
 800140c:	61f8      	str	r0, [r7, #28]
	}
	// C2 PD9
	if(!(pGpiodInReg->idr_9 == STATE_HIGH)){
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f3c3 2340 	ubfx	r3, r3, #9, #1
 8001416:	b2db      	uxtb	r3, r3
 8001418:	2b01      	cmp	r3, #1
 800141a:	d00a      	beq.n	8001432 <main+0x396>

				blue_dah(pGpiodOutReg);
 800141c:	68b8      	ldr	r0, [r7, #8]
 800141e:	f7fe ff5d 	bl	80002dc <blue_dah>
				printf("8\n");
 8001422:	4861      	ldr	r0, [pc, #388]	; (80015a8 <main+0x50c>)
 8001424:	f000 fbe2 	bl	8001bec <puts>
				instruction_str = addCharToString(instruction_str,'8');
 8001428:	2138      	movs	r1, #56	; 0x38
 800142a:	69f8      	ldr	r0, [r7, #28]
 800142c:	f7ff fc12 	bl	8000c54 <addCharToString>
 8001430:	61f8      	str	r0, [r7, #28]
			}
	// C3 PD10
	if(!(pGpiodInReg->idr_10 == STATE_HIGH)){
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f3c3 2380 	ubfx	r3, r3, #10, #1
 800143a:	b2db      	uxtb	r3, r3
 800143c:	2b01      	cmp	r3, #1
 800143e:	d00a      	beq.n	8001456 <main+0x3ba>
				blue_dah(pGpiodOutReg);
 8001440:	68b8      	ldr	r0, [r7, #8]
 8001442:	f7fe ff4b 	bl	80002dc <blue_dah>
				printf("9\n");
 8001446:	4859      	ldr	r0, [pc, #356]	; (80015ac <main+0x510>)
 8001448:	f000 fbd0 	bl	8001bec <puts>
				instruction_str = addCharToString(instruction_str,'9');
 800144c:	2139      	movs	r1, #57	; 0x39
 800144e:	69f8      	ldr	r0, [r7, #28]
 8001450:	f7ff fc00 	bl	8000c54 <addCharToString>
 8001454:	61f8      	str	r0, [r7, #28]

			}
	// C4 PD11
	if(!(pGpiodInReg->idr_11 == STATE_HIGH)){
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f3c3 23c0 	ubfx	r3, r3, #11, #1
 800145e:	b2db      	uxtb	r3, r3
 8001460:	2b01      	cmp	r3, #1
 8001462:	d008      	beq.n	8001476 <main+0x3da>
		// Clears the instruction string
				blue_dah(pGpiodOutReg);
 8001464:	68b8      	ldr	r0, [r7, #8]
 8001466:	f7fe ff39 	bl	80002dc <blue_dah>
				printf("C\n");
 800146a:	4851      	ldr	r0, [pc, #324]	; (80015b0 <main+0x514>)
 800146c:	f000 fbbe 	bl	8001bec <puts>
				clearString(instruction_str);
 8001470:	69f8      	ldr	r0, [r7, #28]
 8001472:	f7ff fc29 	bl	8000cc8 <clearString>
			}
	//
	// make rows high
	// clear R1
	pGpiodOutReg->odr_2 = STATE_HIGH;
 8001476:	68ba      	ldr	r2, [r7, #8]
 8001478:	7813      	ldrb	r3, [r2, #0]
 800147a:	f043 0304 	orr.w	r3, r3, #4
 800147e:	7013      	strb	r3, [r2, #0]
	pGpiodOutReg->odr_3 = STATE_LOW;
 8001480:	68ba      	ldr	r2, [r7, #8]
 8001482:	7813      	ldrb	r3, [r2, #0]
 8001484:	f36f 03c3 	bfc	r3, #3, #1
 8001488:	7013      	strb	r3, [r2, #0]


	// C1 PD8
	if(!(pGpiodInReg->idr_8 == STATE_HIGH)){
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f3c3 2300 	ubfx	r3, r3, #8, #1
 8001492:	b2db      	uxtb	r3, r3
 8001494:	2b01      	cmp	r3, #1
 8001496:	d00a      	beq.n	80014ae <main+0x412>

				blue_dah(pGpiodOutReg);
 8001498:	68b8      	ldr	r0, [r7, #8]
 800149a:	f7fe ff1f 	bl	80002dc <blue_dah>
				printf("*\n");
 800149e:	4845      	ldr	r0, [pc, #276]	; (80015b4 <main+0x518>)
 80014a0:	f000 fba4 	bl	8001bec <puts>
				instruction_str = addCharToString(instruction_str,'*');
 80014a4:	212a      	movs	r1, #42	; 0x2a
 80014a6:	69f8      	ldr	r0, [r7, #28]
 80014a8:	f7ff fbd4 	bl	8000c54 <addCharToString>
 80014ac:	61f8      	str	r0, [r7, #28]
	}
	// C2 PD9
	if(!(pGpiodInReg->idr_9 == STATE_HIGH)){
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f3c3 2340 	ubfx	r3, r3, #9, #1
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d00a      	beq.n	80014d2 <main+0x436>

				blue_dah(pGpiodOutReg);
 80014bc:	68b8      	ldr	r0, [r7, #8]
 80014be:	f7fe ff0d 	bl	80002dc <blue_dah>
				printf("0\n");
 80014c2:	483d      	ldr	r0, [pc, #244]	; (80015b8 <main+0x51c>)
 80014c4:	f000 fb92 	bl	8001bec <puts>
				instruction_str = addCharToString(instruction_str,'0');
 80014c8:	2130      	movs	r1, #48	; 0x30
 80014ca:	69f8      	ldr	r0, [r7, #28]
 80014cc:	f7ff fbc2 	bl	8000c54 <addCharToString>
 80014d0:	61f8      	str	r0, [r7, #28]

			}
	// C3 PD10
	if(!(pGpiodInReg->idr_10 == STATE_HIGH)){
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f3c3 2380 	ubfx	r3, r3, #10, #1
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d00a      	beq.n	80014f6 <main+0x45a>
				blue_dah(pGpiodOutReg);
 80014e0:	68b8      	ldr	r0, [r7, #8]
 80014e2:	f7fe fefb 	bl	80002dc <blue_dah>
				printf("#\n");
 80014e6:	4835      	ldr	r0, [pc, #212]	; (80015bc <main+0x520>)
 80014e8:	f000 fb80 	bl	8001bec <puts>
				instruction_str = addCharToString(instruction_str,'#');
 80014ec:	2123      	movs	r1, #35	; 0x23
 80014ee:	69f8      	ldr	r0, [r7, #28]
 80014f0:	f7ff fbb0 	bl	8000c54 <addCharToString>
 80014f4:	61f8      	str	r0, [r7, #28]

			}
	// C4 PD11
	if(!(pGpiodInReg->idr_11 == STATE_HIGH)){
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f3c3 23c0 	ubfx	r3, r3, #11, #1
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	2b01      	cmp	r3, #1
 8001502:	d008      	beq.n	8001516 <main+0x47a>
		// Deletes the last character in the instruction string
				blue_dah(pGpiodOutReg);
 8001504:	68b8      	ldr	r0, [r7, #8]
 8001506:	f7fe fee9 	bl	80002dc <blue_dah>
				printf("D\n");
 800150a:	482d      	ldr	r0, [pc, #180]	; (80015c0 <main+0x524>)
 800150c:	f000 fb6e 	bl	8001bec <puts>
				clearLastCharacter(instruction_str);
 8001510:	69f8      	ldr	r0, [r7, #28]
 8001512:	f7ff fbf4 	bl	8000cfe <clearLastCharacter>

			}
	if(errState){
 8001516:	4b22      	ldr	r3, [pc, #136]	; (80015a0 <main+0x504>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b00      	cmp	r3, #0
 800151c:	f43f ae57 	beq.w	80011ce <main+0x132>

	pGpiodOutReg->odr_0 = STATE_HIGH;
 8001520:	68ba      	ldr	r2, [r7, #8]
 8001522:	7813      	ldrb	r3, [r2, #0]
 8001524:	f043 0301 	orr.w	r3, r3, #1
 8001528:	7013      	strb	r3, [r2, #0]
	pGpiodOutReg->odr_1 = STATE_LOW;
 800152a:	68ba      	ldr	r2, [r7, #8]
 800152c:	7813      	ldrb	r3, [r2, #0]
 800152e:	f36f 0341 	bfc	r3, #1, #1
 8001532:	7013      	strb	r3, [r2, #0]
	pGpiodOutReg->odr_2 = STATE_HIGH;
 8001534:	68ba      	ldr	r2, [r7, #8]
 8001536:	7813      	ldrb	r3, [r2, #0]
 8001538:	f043 0304 	orr.w	r3, r3, #4
 800153c:	7013      	strb	r3, [r2, #0]
	pGpiodOutReg->odr_3 = STATE_HIGH;
 800153e:	68ba      	ldr	r2, [r7, #8]
 8001540:	7813      	ldrb	r3, [r2, #0]
 8001542:	f043 0308 	orr.w	r3, r3, #8
 8001546:	7013      	strb	r3, [r2, #0]

		while(errState){
 8001548:	e018      	b.n	800157c <main+0x4e0>
			err_flash(pGpiodOutReg);
 800154a:	68b8      	ldr	r0, [r7, #8]
 800154c:	f7fe fee6 	bl	800031c <err_flash>

		if(!(pGpiodInReg->idr_11 == STATE_HIGH)){
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f3c3 23c0 	ubfx	r3, r3, #11, #1
 8001558:	b2db      	uxtb	r3, r3
 800155a:	2b01      	cmp	r3, #1
 800155c:	d00e      	beq.n	800157c <main+0x4e0>
			// Acts as a reset
			reset_flash(pGpiodOutReg);
 800155e:	68b8      	ldr	r0, [r7, #8]
 8001560:	f7fe ff38 	bl	80003d4 <reset_flash>
			printf("B\n");
 8001564:	480d      	ldr	r0, [pc, #52]	; (800159c <main+0x500>)
 8001566:	f000 fb41 	bl	8001bec <puts>
			clearString(instruction_str);
 800156a:	69f8      	ldr	r0, [r7, #28]
 800156c:	f7ff fbac 	bl	8000cc8 <clearString>
			clearString(flash_str);
 8001570:	69b8      	ldr	r0, [r7, #24]
 8001572:	f7ff fba9 	bl	8000cc8 <clearString>
			errState = 0;
 8001576:	4b0a      	ldr	r3, [pc, #40]	; (80015a0 <main+0x504>)
 8001578:	2200      	movs	r2, #0
 800157a:	701a      	strb	r2, [r3, #0]
		while(errState){
 800157c:	4b08      	ldr	r3, [pc, #32]	; (80015a0 <main+0x504>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d1e2      	bne.n	800154a <main+0x4ae>
	pGpiodOutReg->odr_0 = STATE_LOW;
 8001584:	e623      	b.n	80011ce <main+0x132>

		}
	}
	//
	}
}
 8001586:	4618      	mov	r0, r3
 8001588:	3720      	adds	r7, #32
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	08002260 	.word	0x08002260
 8001594:	08002264 	.word	0x08002264
 8001598:	08002268 	.word	0x08002268
 800159c:	0800226c 	.word	0x0800226c
 80015a0:	20000078 	.word	0x20000078
 80015a4:	08002270 	.word	0x08002270
 80015a8:	08002274 	.word	0x08002274
 80015ac:	08002278 	.word	0x08002278
 80015b0:	0800227c 	.word	0x0800227c
 80015b4:	08002280 	.word	0x08002280
 80015b8:	08002284 	.word	0x08002284
 80015bc:	08002288 	.word	0x08002288
 80015c0:	0800228c 	.word	0x0800228c

080015c4 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80015ce:	4b0e      	ldr	r3, [pc, #56]	; (8001608 <ITM_SendChar+0x44>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a0d      	ldr	r2, [pc, #52]	; (8001608 <ITM_SendChar+0x44>)
 80015d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015d8:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80015da:	4b0c      	ldr	r3, [pc, #48]	; (800160c <ITM_SendChar+0x48>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a0b      	ldr	r2, [pc, #44]	; (800160c <ITM_SendChar+0x48>)
 80015e0:	f043 0301 	orr.w	r3, r3, #1
 80015e4:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80015e6:	bf00      	nop
 80015e8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d0f8      	beq.n	80015e8 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80015f6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80015fa:	79fb      	ldrb	r3, [r7, #7]
 80015fc:	6013      	str	r3, [r2, #0]
}
 80015fe:	bf00      	nop
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr
 8001608:	e000edfc 	.word	0xe000edfc
 800160c:	e0000e00 	.word	0xe0000e00

08001610 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]
 8001620:	e00a      	b.n	8001638 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001622:	f3af 8000 	nop.w
 8001626:	4601      	mov	r1, r0
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	1c5a      	adds	r2, r3, #1
 800162c:	60ba      	str	r2, [r7, #8]
 800162e:	b2ca      	uxtb	r2, r1
 8001630:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	3301      	adds	r3, #1
 8001636:	617b      	str	r3, [r7, #20]
 8001638:	697a      	ldr	r2, [r7, #20]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	429a      	cmp	r2, r3
 800163e:	dbf0      	blt.n	8001622 <_read+0x12>
  }

  return len;
 8001640:	687b      	ldr	r3, [r7, #4]
}
 8001642:	4618      	mov	r0, r3
 8001644:	3718      	adds	r7, #24
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b086      	sub	sp, #24
 800164e:	af00      	add	r7, sp, #0
 8001650:	60f8      	str	r0, [r7, #12]
 8001652:	60b9      	str	r1, [r7, #8]
 8001654:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001656:	2300      	movs	r3, #0
 8001658:	617b      	str	r3, [r7, #20]
 800165a:	e009      	b.n	8001670 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	1c5a      	adds	r2, r3, #1
 8001660:	60ba      	str	r2, [r7, #8]
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff ffad 	bl	80015c4 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	3301      	adds	r3, #1
 800166e:	617b      	str	r3, [r7, #20]
 8001670:	697a      	ldr	r2, [r7, #20]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	429a      	cmp	r2, r3
 8001676:	dbf1      	blt.n	800165c <_write+0x12>
  }
  return len;
 8001678:	687b      	ldr	r3, [r7, #4]
}
 800167a:	4618      	mov	r0, r3
 800167c:	3718      	adds	r7, #24
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <_close>:

int _close(int file)
{
 8001682:	b480      	push	{r7}
 8001684:	b083      	sub	sp, #12
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800168a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800168e:	4618      	mov	r0, r3
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	bc80      	pop	{r7}
 8001696:	4770      	bx	lr

08001698 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016a8:	605a      	str	r2, [r3, #4]
  return 0;
 80016aa:	2300      	movs	r3, #0
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bc80      	pop	{r7}
 80016b4:	4770      	bx	lr

080016b6 <_isatty>:

int _isatty(int file)
{
 80016b6:	b480      	push	{r7}
 80016b8:	b083      	sub	sp, #12
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016be:	2301      	movs	r3, #1
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr

080016ca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016ca:	b480      	push	{r7}
 80016cc:	b085      	sub	sp, #20
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	60f8      	str	r0, [r7, #12]
 80016d2:	60b9      	str	r1, [r7, #8]
 80016d4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016d6:	2300      	movs	r3, #0
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3714      	adds	r7, #20
 80016dc:	46bd      	mov	sp, r7
 80016de:	bc80      	pop	{r7}
 80016e0:	4770      	bx	lr
	...

080016e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016ec:	4a14      	ldr	r2, [pc, #80]	; (8001740 <_sbrk+0x5c>)
 80016ee:	4b15      	ldr	r3, [pc, #84]	; (8001744 <_sbrk+0x60>)
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016f8:	4b13      	ldr	r3, [pc, #76]	; (8001748 <_sbrk+0x64>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d102      	bne.n	8001706 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001700:	4b11      	ldr	r3, [pc, #68]	; (8001748 <_sbrk+0x64>)
 8001702:	4a12      	ldr	r2, [pc, #72]	; (800174c <_sbrk+0x68>)
 8001704:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001706:	4b10      	ldr	r3, [pc, #64]	; (8001748 <_sbrk+0x64>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4413      	add	r3, r2
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	429a      	cmp	r2, r3
 8001712:	d207      	bcs.n	8001724 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001714:	f000 fba8 	bl	8001e68 <__errno>
 8001718:	4603      	mov	r3, r0
 800171a:	220c      	movs	r2, #12
 800171c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800171e:	f04f 33ff 	mov.w	r3, #4294967295
 8001722:	e009      	b.n	8001738 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001724:	4b08      	ldr	r3, [pc, #32]	; (8001748 <_sbrk+0x64>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800172a:	4b07      	ldr	r3, [pc, #28]	; (8001748 <_sbrk+0x64>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4413      	add	r3, r2
 8001732:	4a05      	ldr	r2, [pc, #20]	; (8001748 <_sbrk+0x64>)
 8001734:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001736:	68fb      	ldr	r3, [r7, #12]
}
 8001738:	4618      	mov	r0, r3
 800173a:	3718      	adds	r7, #24
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20020000 	.word	0x20020000
 8001744:	00000400 	.word	0x00000400
 8001748:	2000007c 	.word	0x2000007c
 800174c:	200001d0 	.word	0x200001d0

08001750 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001750:	480d      	ldr	r0, [pc, #52]	; (8001788 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001752:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001754:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001758:	480c      	ldr	r0, [pc, #48]	; (800178c <LoopForever+0x6>)
  ldr r1, =_edata
 800175a:	490d      	ldr	r1, [pc, #52]	; (8001790 <LoopForever+0xa>)
  ldr r2, =_sidata
 800175c:	4a0d      	ldr	r2, [pc, #52]	; (8001794 <LoopForever+0xe>)
  movs r3, #0
 800175e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001760:	e002      	b.n	8001768 <LoopCopyDataInit>

08001762 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001762:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001764:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001766:	3304      	adds	r3, #4

08001768 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001768:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800176a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800176c:	d3f9      	bcc.n	8001762 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800176e:	4a0a      	ldr	r2, [pc, #40]	; (8001798 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001770:	4c0a      	ldr	r4, [pc, #40]	; (800179c <LoopForever+0x16>)
  movs r3, #0
 8001772:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001774:	e001      	b.n	800177a <LoopFillZerobss>

08001776 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001776:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001778:	3204      	adds	r2, #4

0800177a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800177a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800177c:	d3fb      	bcc.n	8001776 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800177e:	f000 fb79 	bl	8001e74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001782:	f7ff fc8b 	bl	800109c <main>

08001786 <LoopForever>:

LoopForever:
  b LoopForever
 8001786:	e7fe      	b.n	8001786 <LoopForever>
  ldr   r0, =_estack
 8001788:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800178c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001790:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001794:	08002298 	.word	0x08002298
  ldr r2, =_sbss
 8001798:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800179c:	200001cc 	.word	0x200001cc

080017a0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017a0:	e7fe      	b.n	80017a0 <ADC_IRQHandler>
	...

080017a4 <malloc>:
 80017a4:	4b02      	ldr	r3, [pc, #8]	; (80017b0 <malloc+0xc>)
 80017a6:	4601      	mov	r1, r0
 80017a8:	6818      	ldr	r0, [r3, #0]
 80017aa:	f000 b823 	b.w	80017f4 <_malloc_r>
 80017ae:	bf00      	nop
 80017b0:	20000058 	.word	0x20000058

080017b4 <sbrk_aligned>:
 80017b4:	b570      	push	{r4, r5, r6, lr}
 80017b6:	4e0e      	ldr	r6, [pc, #56]	; (80017f0 <sbrk_aligned+0x3c>)
 80017b8:	460c      	mov	r4, r1
 80017ba:	6831      	ldr	r1, [r6, #0]
 80017bc:	4605      	mov	r5, r0
 80017be:	b911      	cbnz	r1, 80017c6 <sbrk_aligned+0x12>
 80017c0:	f000 fb30 	bl	8001e24 <_sbrk_r>
 80017c4:	6030      	str	r0, [r6, #0]
 80017c6:	4621      	mov	r1, r4
 80017c8:	4628      	mov	r0, r5
 80017ca:	f000 fb2b 	bl	8001e24 <_sbrk_r>
 80017ce:	1c43      	adds	r3, r0, #1
 80017d0:	d00a      	beq.n	80017e8 <sbrk_aligned+0x34>
 80017d2:	1cc4      	adds	r4, r0, #3
 80017d4:	f024 0403 	bic.w	r4, r4, #3
 80017d8:	42a0      	cmp	r0, r4
 80017da:	d007      	beq.n	80017ec <sbrk_aligned+0x38>
 80017dc:	1a21      	subs	r1, r4, r0
 80017de:	4628      	mov	r0, r5
 80017e0:	f000 fb20 	bl	8001e24 <_sbrk_r>
 80017e4:	3001      	adds	r0, #1
 80017e6:	d101      	bne.n	80017ec <sbrk_aligned+0x38>
 80017e8:	f04f 34ff 	mov.w	r4, #4294967295
 80017ec:	4620      	mov	r0, r4
 80017ee:	bd70      	pop	{r4, r5, r6, pc}
 80017f0:	20000084 	.word	0x20000084

080017f4 <_malloc_r>:
 80017f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80017f8:	1ccd      	adds	r5, r1, #3
 80017fa:	f025 0503 	bic.w	r5, r5, #3
 80017fe:	3508      	adds	r5, #8
 8001800:	2d0c      	cmp	r5, #12
 8001802:	bf38      	it	cc
 8001804:	250c      	movcc	r5, #12
 8001806:	2d00      	cmp	r5, #0
 8001808:	4607      	mov	r7, r0
 800180a:	db01      	blt.n	8001810 <_malloc_r+0x1c>
 800180c:	42a9      	cmp	r1, r5
 800180e:	d905      	bls.n	800181c <_malloc_r+0x28>
 8001810:	230c      	movs	r3, #12
 8001812:	603b      	str	r3, [r7, #0]
 8001814:	2600      	movs	r6, #0
 8001816:	4630      	mov	r0, r6
 8001818:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800181c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80018f0 <_malloc_r+0xfc>
 8001820:	f000 f868 	bl	80018f4 <__malloc_lock>
 8001824:	f8d8 3000 	ldr.w	r3, [r8]
 8001828:	461c      	mov	r4, r3
 800182a:	bb5c      	cbnz	r4, 8001884 <_malloc_r+0x90>
 800182c:	4629      	mov	r1, r5
 800182e:	4638      	mov	r0, r7
 8001830:	f7ff ffc0 	bl	80017b4 <sbrk_aligned>
 8001834:	1c43      	adds	r3, r0, #1
 8001836:	4604      	mov	r4, r0
 8001838:	d155      	bne.n	80018e6 <_malloc_r+0xf2>
 800183a:	f8d8 4000 	ldr.w	r4, [r8]
 800183e:	4626      	mov	r6, r4
 8001840:	2e00      	cmp	r6, #0
 8001842:	d145      	bne.n	80018d0 <_malloc_r+0xdc>
 8001844:	2c00      	cmp	r4, #0
 8001846:	d048      	beq.n	80018da <_malloc_r+0xe6>
 8001848:	6823      	ldr	r3, [r4, #0]
 800184a:	4631      	mov	r1, r6
 800184c:	4638      	mov	r0, r7
 800184e:	eb04 0903 	add.w	r9, r4, r3
 8001852:	f000 fae7 	bl	8001e24 <_sbrk_r>
 8001856:	4581      	cmp	r9, r0
 8001858:	d13f      	bne.n	80018da <_malloc_r+0xe6>
 800185a:	6821      	ldr	r1, [r4, #0]
 800185c:	1a6d      	subs	r5, r5, r1
 800185e:	4629      	mov	r1, r5
 8001860:	4638      	mov	r0, r7
 8001862:	f7ff ffa7 	bl	80017b4 <sbrk_aligned>
 8001866:	3001      	adds	r0, #1
 8001868:	d037      	beq.n	80018da <_malloc_r+0xe6>
 800186a:	6823      	ldr	r3, [r4, #0]
 800186c:	442b      	add	r3, r5
 800186e:	6023      	str	r3, [r4, #0]
 8001870:	f8d8 3000 	ldr.w	r3, [r8]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d038      	beq.n	80018ea <_malloc_r+0xf6>
 8001878:	685a      	ldr	r2, [r3, #4]
 800187a:	42a2      	cmp	r2, r4
 800187c:	d12b      	bne.n	80018d6 <_malloc_r+0xe2>
 800187e:	2200      	movs	r2, #0
 8001880:	605a      	str	r2, [r3, #4]
 8001882:	e00f      	b.n	80018a4 <_malloc_r+0xb0>
 8001884:	6822      	ldr	r2, [r4, #0]
 8001886:	1b52      	subs	r2, r2, r5
 8001888:	d41f      	bmi.n	80018ca <_malloc_r+0xd6>
 800188a:	2a0b      	cmp	r2, #11
 800188c:	d917      	bls.n	80018be <_malloc_r+0xca>
 800188e:	1961      	adds	r1, r4, r5
 8001890:	42a3      	cmp	r3, r4
 8001892:	6025      	str	r5, [r4, #0]
 8001894:	bf18      	it	ne
 8001896:	6059      	strne	r1, [r3, #4]
 8001898:	6863      	ldr	r3, [r4, #4]
 800189a:	bf08      	it	eq
 800189c:	f8c8 1000 	streq.w	r1, [r8]
 80018a0:	5162      	str	r2, [r4, r5]
 80018a2:	604b      	str	r3, [r1, #4]
 80018a4:	4638      	mov	r0, r7
 80018a6:	f104 060b 	add.w	r6, r4, #11
 80018aa:	f000 f829 	bl	8001900 <__malloc_unlock>
 80018ae:	f026 0607 	bic.w	r6, r6, #7
 80018b2:	1d23      	adds	r3, r4, #4
 80018b4:	1af2      	subs	r2, r6, r3
 80018b6:	d0ae      	beq.n	8001816 <_malloc_r+0x22>
 80018b8:	1b9b      	subs	r3, r3, r6
 80018ba:	50a3      	str	r3, [r4, r2]
 80018bc:	e7ab      	b.n	8001816 <_malloc_r+0x22>
 80018be:	42a3      	cmp	r3, r4
 80018c0:	6862      	ldr	r2, [r4, #4]
 80018c2:	d1dd      	bne.n	8001880 <_malloc_r+0x8c>
 80018c4:	f8c8 2000 	str.w	r2, [r8]
 80018c8:	e7ec      	b.n	80018a4 <_malloc_r+0xb0>
 80018ca:	4623      	mov	r3, r4
 80018cc:	6864      	ldr	r4, [r4, #4]
 80018ce:	e7ac      	b.n	800182a <_malloc_r+0x36>
 80018d0:	4634      	mov	r4, r6
 80018d2:	6876      	ldr	r6, [r6, #4]
 80018d4:	e7b4      	b.n	8001840 <_malloc_r+0x4c>
 80018d6:	4613      	mov	r3, r2
 80018d8:	e7cc      	b.n	8001874 <_malloc_r+0x80>
 80018da:	230c      	movs	r3, #12
 80018dc:	603b      	str	r3, [r7, #0]
 80018de:	4638      	mov	r0, r7
 80018e0:	f000 f80e 	bl	8001900 <__malloc_unlock>
 80018e4:	e797      	b.n	8001816 <_malloc_r+0x22>
 80018e6:	6025      	str	r5, [r4, #0]
 80018e8:	e7dc      	b.n	80018a4 <_malloc_r+0xb0>
 80018ea:	605b      	str	r3, [r3, #4]
 80018ec:	deff      	udf	#255	; 0xff
 80018ee:	bf00      	nop
 80018f0:	20000080 	.word	0x20000080

080018f4 <__malloc_lock>:
 80018f4:	4801      	ldr	r0, [pc, #4]	; (80018fc <__malloc_lock+0x8>)
 80018f6:	f000 bae2 	b.w	8001ebe <__retarget_lock_acquire_recursive>
 80018fa:	bf00      	nop
 80018fc:	200001c8 	.word	0x200001c8

08001900 <__malloc_unlock>:
 8001900:	4801      	ldr	r0, [pc, #4]	; (8001908 <__malloc_unlock+0x8>)
 8001902:	f000 badd 	b.w	8001ec0 <__retarget_lock_release_recursive>
 8001906:	bf00      	nop
 8001908:	200001c8 	.word	0x200001c8

0800190c <std>:
 800190c:	2300      	movs	r3, #0
 800190e:	b510      	push	{r4, lr}
 8001910:	4604      	mov	r4, r0
 8001912:	e9c0 3300 	strd	r3, r3, [r0]
 8001916:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800191a:	6083      	str	r3, [r0, #8]
 800191c:	8181      	strh	r1, [r0, #12]
 800191e:	6643      	str	r3, [r0, #100]	; 0x64
 8001920:	81c2      	strh	r2, [r0, #14]
 8001922:	6183      	str	r3, [r0, #24]
 8001924:	4619      	mov	r1, r3
 8001926:	2208      	movs	r2, #8
 8001928:	305c      	adds	r0, #92	; 0x5c
 800192a:	f000 fa3f 	bl	8001dac <memset>
 800192e:	4b0d      	ldr	r3, [pc, #52]	; (8001964 <std+0x58>)
 8001930:	6263      	str	r3, [r4, #36]	; 0x24
 8001932:	4b0d      	ldr	r3, [pc, #52]	; (8001968 <std+0x5c>)
 8001934:	62a3      	str	r3, [r4, #40]	; 0x28
 8001936:	4b0d      	ldr	r3, [pc, #52]	; (800196c <std+0x60>)
 8001938:	62e3      	str	r3, [r4, #44]	; 0x2c
 800193a:	4b0d      	ldr	r3, [pc, #52]	; (8001970 <std+0x64>)
 800193c:	6323      	str	r3, [r4, #48]	; 0x30
 800193e:	4b0d      	ldr	r3, [pc, #52]	; (8001974 <std+0x68>)
 8001940:	6224      	str	r4, [r4, #32]
 8001942:	429c      	cmp	r4, r3
 8001944:	d006      	beq.n	8001954 <std+0x48>
 8001946:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800194a:	4294      	cmp	r4, r2
 800194c:	d002      	beq.n	8001954 <std+0x48>
 800194e:	33d0      	adds	r3, #208	; 0xd0
 8001950:	429c      	cmp	r4, r3
 8001952:	d105      	bne.n	8001960 <std+0x54>
 8001954:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001958:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800195c:	f000 baae 	b.w	8001ebc <__retarget_lock_init_recursive>
 8001960:	bd10      	pop	{r4, pc}
 8001962:	bf00      	nop
 8001964:	08001bfd 	.word	0x08001bfd
 8001968:	08001c1f 	.word	0x08001c1f
 800196c:	08001c57 	.word	0x08001c57
 8001970:	08001c7b 	.word	0x08001c7b
 8001974:	20000088 	.word	0x20000088

08001978 <stdio_exit_handler>:
 8001978:	4a02      	ldr	r2, [pc, #8]	; (8001984 <stdio_exit_handler+0xc>)
 800197a:	4903      	ldr	r1, [pc, #12]	; (8001988 <stdio_exit_handler+0x10>)
 800197c:	4803      	ldr	r0, [pc, #12]	; (800198c <stdio_exit_handler+0x14>)
 800197e:	f000 b869 	b.w	8001a54 <_fwalk_sglue>
 8001982:	bf00      	nop
 8001984:	20000000 	.word	0x20000000
 8001988:	0800206d 	.word	0x0800206d
 800198c:	2000000c 	.word	0x2000000c

08001990 <cleanup_stdio>:
 8001990:	6841      	ldr	r1, [r0, #4]
 8001992:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <cleanup_stdio+0x34>)
 8001994:	4299      	cmp	r1, r3
 8001996:	b510      	push	{r4, lr}
 8001998:	4604      	mov	r4, r0
 800199a:	d001      	beq.n	80019a0 <cleanup_stdio+0x10>
 800199c:	f000 fb66 	bl	800206c <_fflush_r>
 80019a0:	68a1      	ldr	r1, [r4, #8]
 80019a2:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <cleanup_stdio+0x38>)
 80019a4:	4299      	cmp	r1, r3
 80019a6:	d002      	beq.n	80019ae <cleanup_stdio+0x1e>
 80019a8:	4620      	mov	r0, r4
 80019aa:	f000 fb5f 	bl	800206c <_fflush_r>
 80019ae:	68e1      	ldr	r1, [r4, #12]
 80019b0:	4b06      	ldr	r3, [pc, #24]	; (80019cc <cleanup_stdio+0x3c>)
 80019b2:	4299      	cmp	r1, r3
 80019b4:	d004      	beq.n	80019c0 <cleanup_stdio+0x30>
 80019b6:	4620      	mov	r0, r4
 80019b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80019bc:	f000 bb56 	b.w	800206c <_fflush_r>
 80019c0:	bd10      	pop	{r4, pc}
 80019c2:	bf00      	nop
 80019c4:	20000088 	.word	0x20000088
 80019c8:	200000f0 	.word	0x200000f0
 80019cc:	20000158 	.word	0x20000158

080019d0 <global_stdio_init.part.0>:
 80019d0:	b510      	push	{r4, lr}
 80019d2:	4b0b      	ldr	r3, [pc, #44]	; (8001a00 <global_stdio_init.part.0+0x30>)
 80019d4:	4c0b      	ldr	r4, [pc, #44]	; (8001a04 <global_stdio_init.part.0+0x34>)
 80019d6:	4a0c      	ldr	r2, [pc, #48]	; (8001a08 <global_stdio_init.part.0+0x38>)
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	4620      	mov	r0, r4
 80019dc:	2200      	movs	r2, #0
 80019de:	2104      	movs	r1, #4
 80019e0:	f7ff ff94 	bl	800190c <std>
 80019e4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80019e8:	2201      	movs	r2, #1
 80019ea:	2109      	movs	r1, #9
 80019ec:	f7ff ff8e 	bl	800190c <std>
 80019f0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80019f4:	2202      	movs	r2, #2
 80019f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80019fa:	2112      	movs	r1, #18
 80019fc:	f7ff bf86 	b.w	800190c <std>
 8001a00:	200001c0 	.word	0x200001c0
 8001a04:	20000088 	.word	0x20000088
 8001a08:	08001979 	.word	0x08001979

08001a0c <__sfp_lock_acquire>:
 8001a0c:	4801      	ldr	r0, [pc, #4]	; (8001a14 <__sfp_lock_acquire+0x8>)
 8001a0e:	f000 ba56 	b.w	8001ebe <__retarget_lock_acquire_recursive>
 8001a12:	bf00      	nop
 8001a14:	200001c9 	.word	0x200001c9

08001a18 <__sfp_lock_release>:
 8001a18:	4801      	ldr	r0, [pc, #4]	; (8001a20 <__sfp_lock_release+0x8>)
 8001a1a:	f000 ba51 	b.w	8001ec0 <__retarget_lock_release_recursive>
 8001a1e:	bf00      	nop
 8001a20:	200001c9 	.word	0x200001c9

08001a24 <__sinit>:
 8001a24:	b510      	push	{r4, lr}
 8001a26:	4604      	mov	r4, r0
 8001a28:	f7ff fff0 	bl	8001a0c <__sfp_lock_acquire>
 8001a2c:	6a23      	ldr	r3, [r4, #32]
 8001a2e:	b11b      	cbz	r3, 8001a38 <__sinit+0x14>
 8001a30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001a34:	f7ff bff0 	b.w	8001a18 <__sfp_lock_release>
 8001a38:	4b04      	ldr	r3, [pc, #16]	; (8001a4c <__sinit+0x28>)
 8001a3a:	6223      	str	r3, [r4, #32]
 8001a3c:	4b04      	ldr	r3, [pc, #16]	; (8001a50 <__sinit+0x2c>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d1f5      	bne.n	8001a30 <__sinit+0xc>
 8001a44:	f7ff ffc4 	bl	80019d0 <global_stdio_init.part.0>
 8001a48:	e7f2      	b.n	8001a30 <__sinit+0xc>
 8001a4a:	bf00      	nop
 8001a4c:	08001991 	.word	0x08001991
 8001a50:	200001c0 	.word	0x200001c0

08001a54 <_fwalk_sglue>:
 8001a54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a58:	4607      	mov	r7, r0
 8001a5a:	4688      	mov	r8, r1
 8001a5c:	4614      	mov	r4, r2
 8001a5e:	2600      	movs	r6, #0
 8001a60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001a64:	f1b9 0901 	subs.w	r9, r9, #1
 8001a68:	d505      	bpl.n	8001a76 <_fwalk_sglue+0x22>
 8001a6a:	6824      	ldr	r4, [r4, #0]
 8001a6c:	2c00      	cmp	r4, #0
 8001a6e:	d1f7      	bne.n	8001a60 <_fwalk_sglue+0xc>
 8001a70:	4630      	mov	r0, r6
 8001a72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001a76:	89ab      	ldrh	r3, [r5, #12]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d907      	bls.n	8001a8c <_fwalk_sglue+0x38>
 8001a7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001a80:	3301      	adds	r3, #1
 8001a82:	d003      	beq.n	8001a8c <_fwalk_sglue+0x38>
 8001a84:	4629      	mov	r1, r5
 8001a86:	4638      	mov	r0, r7
 8001a88:	47c0      	blx	r8
 8001a8a:	4306      	orrs	r6, r0
 8001a8c:	3568      	adds	r5, #104	; 0x68
 8001a8e:	e7e9      	b.n	8001a64 <_fwalk_sglue+0x10>

08001a90 <_fwrite_r>:
 8001a90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a94:	9c08      	ldr	r4, [sp, #32]
 8001a96:	468a      	mov	sl, r1
 8001a98:	4690      	mov	r8, r2
 8001a9a:	fb02 f903 	mul.w	r9, r2, r3
 8001a9e:	4606      	mov	r6, r0
 8001aa0:	b118      	cbz	r0, 8001aaa <_fwrite_r+0x1a>
 8001aa2:	6a03      	ldr	r3, [r0, #32]
 8001aa4:	b90b      	cbnz	r3, 8001aaa <_fwrite_r+0x1a>
 8001aa6:	f7ff ffbd 	bl	8001a24 <__sinit>
 8001aaa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001aac:	07dd      	lsls	r5, r3, #31
 8001aae:	d405      	bmi.n	8001abc <_fwrite_r+0x2c>
 8001ab0:	89a3      	ldrh	r3, [r4, #12]
 8001ab2:	0598      	lsls	r0, r3, #22
 8001ab4:	d402      	bmi.n	8001abc <_fwrite_r+0x2c>
 8001ab6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001ab8:	f000 fa01 	bl	8001ebe <__retarget_lock_acquire_recursive>
 8001abc:	89a3      	ldrh	r3, [r4, #12]
 8001abe:	0719      	lsls	r1, r3, #28
 8001ac0:	d516      	bpl.n	8001af0 <_fwrite_r+0x60>
 8001ac2:	6923      	ldr	r3, [r4, #16]
 8001ac4:	b1a3      	cbz	r3, 8001af0 <_fwrite_r+0x60>
 8001ac6:	2500      	movs	r5, #0
 8001ac8:	454d      	cmp	r5, r9
 8001aca:	d01f      	beq.n	8001b0c <_fwrite_r+0x7c>
 8001acc:	68a7      	ldr	r7, [r4, #8]
 8001ace:	f81a 1005 	ldrb.w	r1, [sl, r5]
 8001ad2:	3f01      	subs	r7, #1
 8001ad4:	2f00      	cmp	r7, #0
 8001ad6:	60a7      	str	r7, [r4, #8]
 8001ad8:	da04      	bge.n	8001ae4 <_fwrite_r+0x54>
 8001ada:	69a3      	ldr	r3, [r4, #24]
 8001adc:	429f      	cmp	r7, r3
 8001ade:	db0f      	blt.n	8001b00 <_fwrite_r+0x70>
 8001ae0:	290a      	cmp	r1, #10
 8001ae2:	d00d      	beq.n	8001b00 <_fwrite_r+0x70>
 8001ae4:	6823      	ldr	r3, [r4, #0]
 8001ae6:	1c5a      	adds	r2, r3, #1
 8001ae8:	6022      	str	r2, [r4, #0]
 8001aea:	7019      	strb	r1, [r3, #0]
 8001aec:	3501      	adds	r5, #1
 8001aee:	e7eb      	b.n	8001ac8 <_fwrite_r+0x38>
 8001af0:	4621      	mov	r1, r4
 8001af2:	4630      	mov	r0, r6
 8001af4:	f000 f902 	bl	8001cfc <__swsetup_r>
 8001af8:	2800      	cmp	r0, #0
 8001afa:	d0e4      	beq.n	8001ac6 <_fwrite_r+0x36>
 8001afc:	2500      	movs	r5, #0
 8001afe:	e005      	b.n	8001b0c <_fwrite_r+0x7c>
 8001b00:	4622      	mov	r2, r4
 8001b02:	4630      	mov	r0, r6
 8001b04:	f000 f8bd 	bl	8001c82 <__swbuf_r>
 8001b08:	3001      	adds	r0, #1
 8001b0a:	d1ef      	bne.n	8001aec <_fwrite_r+0x5c>
 8001b0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001b0e:	07da      	lsls	r2, r3, #31
 8001b10:	d405      	bmi.n	8001b1e <_fwrite_r+0x8e>
 8001b12:	89a3      	ldrh	r3, [r4, #12]
 8001b14:	059b      	lsls	r3, r3, #22
 8001b16:	d402      	bmi.n	8001b1e <_fwrite_r+0x8e>
 8001b18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001b1a:	f000 f9d1 	bl	8001ec0 <__retarget_lock_release_recursive>
 8001b1e:	fbb5 f0f8 	udiv	r0, r5, r8
 8001b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08001b28 <fwrite>:
 8001b28:	b507      	push	{r0, r1, r2, lr}
 8001b2a:	9300      	str	r3, [sp, #0]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	460a      	mov	r2, r1
 8001b30:	4601      	mov	r1, r0
 8001b32:	4803      	ldr	r0, [pc, #12]	; (8001b40 <fwrite+0x18>)
 8001b34:	6800      	ldr	r0, [r0, #0]
 8001b36:	f7ff ffab 	bl	8001a90 <_fwrite_r>
 8001b3a:	b003      	add	sp, #12
 8001b3c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b40:	20000058 	.word	0x20000058

08001b44 <_puts_r>:
 8001b44:	6a03      	ldr	r3, [r0, #32]
 8001b46:	b570      	push	{r4, r5, r6, lr}
 8001b48:	6884      	ldr	r4, [r0, #8]
 8001b4a:	4605      	mov	r5, r0
 8001b4c:	460e      	mov	r6, r1
 8001b4e:	b90b      	cbnz	r3, 8001b54 <_puts_r+0x10>
 8001b50:	f7ff ff68 	bl	8001a24 <__sinit>
 8001b54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001b56:	07db      	lsls	r3, r3, #31
 8001b58:	d405      	bmi.n	8001b66 <_puts_r+0x22>
 8001b5a:	89a3      	ldrh	r3, [r4, #12]
 8001b5c:	0598      	lsls	r0, r3, #22
 8001b5e:	d402      	bmi.n	8001b66 <_puts_r+0x22>
 8001b60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001b62:	f000 f9ac 	bl	8001ebe <__retarget_lock_acquire_recursive>
 8001b66:	89a3      	ldrh	r3, [r4, #12]
 8001b68:	0719      	lsls	r1, r3, #28
 8001b6a:	d513      	bpl.n	8001b94 <_puts_r+0x50>
 8001b6c:	6923      	ldr	r3, [r4, #16]
 8001b6e:	b18b      	cbz	r3, 8001b94 <_puts_r+0x50>
 8001b70:	3e01      	subs	r6, #1
 8001b72:	68a3      	ldr	r3, [r4, #8]
 8001b74:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001b78:	3b01      	subs	r3, #1
 8001b7a:	60a3      	str	r3, [r4, #8]
 8001b7c:	b9e9      	cbnz	r1, 8001bba <_puts_r+0x76>
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	da2e      	bge.n	8001be0 <_puts_r+0x9c>
 8001b82:	4622      	mov	r2, r4
 8001b84:	210a      	movs	r1, #10
 8001b86:	4628      	mov	r0, r5
 8001b88:	f000 f87b 	bl	8001c82 <__swbuf_r>
 8001b8c:	3001      	adds	r0, #1
 8001b8e:	d007      	beq.n	8001ba0 <_puts_r+0x5c>
 8001b90:	250a      	movs	r5, #10
 8001b92:	e007      	b.n	8001ba4 <_puts_r+0x60>
 8001b94:	4621      	mov	r1, r4
 8001b96:	4628      	mov	r0, r5
 8001b98:	f000 f8b0 	bl	8001cfc <__swsetup_r>
 8001b9c:	2800      	cmp	r0, #0
 8001b9e:	d0e7      	beq.n	8001b70 <_puts_r+0x2c>
 8001ba0:	f04f 35ff 	mov.w	r5, #4294967295
 8001ba4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001ba6:	07da      	lsls	r2, r3, #31
 8001ba8:	d405      	bmi.n	8001bb6 <_puts_r+0x72>
 8001baa:	89a3      	ldrh	r3, [r4, #12]
 8001bac:	059b      	lsls	r3, r3, #22
 8001bae:	d402      	bmi.n	8001bb6 <_puts_r+0x72>
 8001bb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001bb2:	f000 f985 	bl	8001ec0 <__retarget_lock_release_recursive>
 8001bb6:	4628      	mov	r0, r5
 8001bb8:	bd70      	pop	{r4, r5, r6, pc}
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	da04      	bge.n	8001bc8 <_puts_r+0x84>
 8001bbe:	69a2      	ldr	r2, [r4, #24]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	dc06      	bgt.n	8001bd2 <_puts_r+0x8e>
 8001bc4:	290a      	cmp	r1, #10
 8001bc6:	d004      	beq.n	8001bd2 <_puts_r+0x8e>
 8001bc8:	6823      	ldr	r3, [r4, #0]
 8001bca:	1c5a      	adds	r2, r3, #1
 8001bcc:	6022      	str	r2, [r4, #0]
 8001bce:	7019      	strb	r1, [r3, #0]
 8001bd0:	e7cf      	b.n	8001b72 <_puts_r+0x2e>
 8001bd2:	4622      	mov	r2, r4
 8001bd4:	4628      	mov	r0, r5
 8001bd6:	f000 f854 	bl	8001c82 <__swbuf_r>
 8001bda:	3001      	adds	r0, #1
 8001bdc:	d1c9      	bne.n	8001b72 <_puts_r+0x2e>
 8001bde:	e7df      	b.n	8001ba0 <_puts_r+0x5c>
 8001be0:	6823      	ldr	r3, [r4, #0]
 8001be2:	250a      	movs	r5, #10
 8001be4:	1c5a      	adds	r2, r3, #1
 8001be6:	6022      	str	r2, [r4, #0]
 8001be8:	701d      	strb	r5, [r3, #0]
 8001bea:	e7db      	b.n	8001ba4 <_puts_r+0x60>

08001bec <puts>:
 8001bec:	4b02      	ldr	r3, [pc, #8]	; (8001bf8 <puts+0xc>)
 8001bee:	4601      	mov	r1, r0
 8001bf0:	6818      	ldr	r0, [r3, #0]
 8001bf2:	f7ff bfa7 	b.w	8001b44 <_puts_r>
 8001bf6:	bf00      	nop
 8001bf8:	20000058 	.word	0x20000058

08001bfc <__sread>:
 8001bfc:	b510      	push	{r4, lr}
 8001bfe:	460c      	mov	r4, r1
 8001c00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c04:	f000 f8fc 	bl	8001e00 <_read_r>
 8001c08:	2800      	cmp	r0, #0
 8001c0a:	bfab      	itete	ge
 8001c0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001c0e:	89a3      	ldrhlt	r3, [r4, #12]
 8001c10:	181b      	addge	r3, r3, r0
 8001c12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001c16:	bfac      	ite	ge
 8001c18:	6563      	strge	r3, [r4, #84]	; 0x54
 8001c1a:	81a3      	strhlt	r3, [r4, #12]
 8001c1c:	bd10      	pop	{r4, pc}

08001c1e <__swrite>:
 8001c1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c22:	461f      	mov	r7, r3
 8001c24:	898b      	ldrh	r3, [r1, #12]
 8001c26:	05db      	lsls	r3, r3, #23
 8001c28:	4605      	mov	r5, r0
 8001c2a:	460c      	mov	r4, r1
 8001c2c:	4616      	mov	r6, r2
 8001c2e:	d505      	bpl.n	8001c3c <__swrite+0x1e>
 8001c30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c34:	2302      	movs	r3, #2
 8001c36:	2200      	movs	r2, #0
 8001c38:	f000 f8d0 	bl	8001ddc <_lseek_r>
 8001c3c:	89a3      	ldrh	r3, [r4, #12]
 8001c3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001c42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001c46:	81a3      	strh	r3, [r4, #12]
 8001c48:	4632      	mov	r2, r6
 8001c4a:	463b      	mov	r3, r7
 8001c4c:	4628      	mov	r0, r5
 8001c4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001c52:	f000 b8f7 	b.w	8001e44 <_write_r>

08001c56 <__sseek>:
 8001c56:	b510      	push	{r4, lr}
 8001c58:	460c      	mov	r4, r1
 8001c5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c5e:	f000 f8bd 	bl	8001ddc <_lseek_r>
 8001c62:	1c43      	adds	r3, r0, #1
 8001c64:	89a3      	ldrh	r3, [r4, #12]
 8001c66:	bf15      	itete	ne
 8001c68:	6560      	strne	r0, [r4, #84]	; 0x54
 8001c6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001c6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001c72:	81a3      	strheq	r3, [r4, #12]
 8001c74:	bf18      	it	ne
 8001c76:	81a3      	strhne	r3, [r4, #12]
 8001c78:	bd10      	pop	{r4, pc}

08001c7a <__sclose>:
 8001c7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c7e:	f000 b89d 	b.w	8001dbc <_close_r>

08001c82 <__swbuf_r>:
 8001c82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c84:	460e      	mov	r6, r1
 8001c86:	4614      	mov	r4, r2
 8001c88:	4605      	mov	r5, r0
 8001c8a:	b118      	cbz	r0, 8001c94 <__swbuf_r+0x12>
 8001c8c:	6a03      	ldr	r3, [r0, #32]
 8001c8e:	b90b      	cbnz	r3, 8001c94 <__swbuf_r+0x12>
 8001c90:	f7ff fec8 	bl	8001a24 <__sinit>
 8001c94:	69a3      	ldr	r3, [r4, #24]
 8001c96:	60a3      	str	r3, [r4, #8]
 8001c98:	89a3      	ldrh	r3, [r4, #12]
 8001c9a:	071a      	lsls	r2, r3, #28
 8001c9c:	d525      	bpl.n	8001cea <__swbuf_r+0x68>
 8001c9e:	6923      	ldr	r3, [r4, #16]
 8001ca0:	b31b      	cbz	r3, 8001cea <__swbuf_r+0x68>
 8001ca2:	6823      	ldr	r3, [r4, #0]
 8001ca4:	6922      	ldr	r2, [r4, #16]
 8001ca6:	1a98      	subs	r0, r3, r2
 8001ca8:	6963      	ldr	r3, [r4, #20]
 8001caa:	b2f6      	uxtb	r6, r6
 8001cac:	4283      	cmp	r3, r0
 8001cae:	4637      	mov	r7, r6
 8001cb0:	dc04      	bgt.n	8001cbc <__swbuf_r+0x3a>
 8001cb2:	4621      	mov	r1, r4
 8001cb4:	4628      	mov	r0, r5
 8001cb6:	f000 f9d9 	bl	800206c <_fflush_r>
 8001cba:	b9e0      	cbnz	r0, 8001cf6 <__swbuf_r+0x74>
 8001cbc:	68a3      	ldr	r3, [r4, #8]
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	60a3      	str	r3, [r4, #8]
 8001cc2:	6823      	ldr	r3, [r4, #0]
 8001cc4:	1c5a      	adds	r2, r3, #1
 8001cc6:	6022      	str	r2, [r4, #0]
 8001cc8:	701e      	strb	r6, [r3, #0]
 8001cca:	6962      	ldr	r2, [r4, #20]
 8001ccc:	1c43      	adds	r3, r0, #1
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d004      	beq.n	8001cdc <__swbuf_r+0x5a>
 8001cd2:	89a3      	ldrh	r3, [r4, #12]
 8001cd4:	07db      	lsls	r3, r3, #31
 8001cd6:	d506      	bpl.n	8001ce6 <__swbuf_r+0x64>
 8001cd8:	2e0a      	cmp	r6, #10
 8001cda:	d104      	bne.n	8001ce6 <__swbuf_r+0x64>
 8001cdc:	4621      	mov	r1, r4
 8001cde:	4628      	mov	r0, r5
 8001ce0:	f000 f9c4 	bl	800206c <_fflush_r>
 8001ce4:	b938      	cbnz	r0, 8001cf6 <__swbuf_r+0x74>
 8001ce6:	4638      	mov	r0, r7
 8001ce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001cea:	4621      	mov	r1, r4
 8001cec:	4628      	mov	r0, r5
 8001cee:	f000 f805 	bl	8001cfc <__swsetup_r>
 8001cf2:	2800      	cmp	r0, #0
 8001cf4:	d0d5      	beq.n	8001ca2 <__swbuf_r+0x20>
 8001cf6:	f04f 37ff 	mov.w	r7, #4294967295
 8001cfa:	e7f4      	b.n	8001ce6 <__swbuf_r+0x64>

08001cfc <__swsetup_r>:
 8001cfc:	b538      	push	{r3, r4, r5, lr}
 8001cfe:	4b2a      	ldr	r3, [pc, #168]	; (8001da8 <__swsetup_r+0xac>)
 8001d00:	4605      	mov	r5, r0
 8001d02:	6818      	ldr	r0, [r3, #0]
 8001d04:	460c      	mov	r4, r1
 8001d06:	b118      	cbz	r0, 8001d10 <__swsetup_r+0x14>
 8001d08:	6a03      	ldr	r3, [r0, #32]
 8001d0a:	b90b      	cbnz	r3, 8001d10 <__swsetup_r+0x14>
 8001d0c:	f7ff fe8a 	bl	8001a24 <__sinit>
 8001d10:	89a3      	ldrh	r3, [r4, #12]
 8001d12:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001d16:	0718      	lsls	r0, r3, #28
 8001d18:	d422      	bmi.n	8001d60 <__swsetup_r+0x64>
 8001d1a:	06d9      	lsls	r1, r3, #27
 8001d1c:	d407      	bmi.n	8001d2e <__swsetup_r+0x32>
 8001d1e:	2309      	movs	r3, #9
 8001d20:	602b      	str	r3, [r5, #0]
 8001d22:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001d26:	81a3      	strh	r3, [r4, #12]
 8001d28:	f04f 30ff 	mov.w	r0, #4294967295
 8001d2c:	e034      	b.n	8001d98 <__swsetup_r+0x9c>
 8001d2e:	0758      	lsls	r0, r3, #29
 8001d30:	d512      	bpl.n	8001d58 <__swsetup_r+0x5c>
 8001d32:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001d34:	b141      	cbz	r1, 8001d48 <__swsetup_r+0x4c>
 8001d36:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001d3a:	4299      	cmp	r1, r3
 8001d3c:	d002      	beq.n	8001d44 <__swsetup_r+0x48>
 8001d3e:	4628      	mov	r0, r5
 8001d40:	f000 f8c8 	bl	8001ed4 <_free_r>
 8001d44:	2300      	movs	r3, #0
 8001d46:	6363      	str	r3, [r4, #52]	; 0x34
 8001d48:	89a3      	ldrh	r3, [r4, #12]
 8001d4a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001d4e:	81a3      	strh	r3, [r4, #12]
 8001d50:	2300      	movs	r3, #0
 8001d52:	6063      	str	r3, [r4, #4]
 8001d54:	6923      	ldr	r3, [r4, #16]
 8001d56:	6023      	str	r3, [r4, #0]
 8001d58:	89a3      	ldrh	r3, [r4, #12]
 8001d5a:	f043 0308 	orr.w	r3, r3, #8
 8001d5e:	81a3      	strh	r3, [r4, #12]
 8001d60:	6923      	ldr	r3, [r4, #16]
 8001d62:	b94b      	cbnz	r3, 8001d78 <__swsetup_r+0x7c>
 8001d64:	89a3      	ldrh	r3, [r4, #12]
 8001d66:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001d6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d6e:	d003      	beq.n	8001d78 <__swsetup_r+0x7c>
 8001d70:	4621      	mov	r1, r4
 8001d72:	4628      	mov	r0, r5
 8001d74:	f000 f9c8 	bl	8002108 <__smakebuf_r>
 8001d78:	89a0      	ldrh	r0, [r4, #12]
 8001d7a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001d7e:	f010 0301 	ands.w	r3, r0, #1
 8001d82:	d00a      	beq.n	8001d9a <__swsetup_r+0x9e>
 8001d84:	2300      	movs	r3, #0
 8001d86:	60a3      	str	r3, [r4, #8]
 8001d88:	6963      	ldr	r3, [r4, #20]
 8001d8a:	425b      	negs	r3, r3
 8001d8c:	61a3      	str	r3, [r4, #24]
 8001d8e:	6923      	ldr	r3, [r4, #16]
 8001d90:	b943      	cbnz	r3, 8001da4 <__swsetup_r+0xa8>
 8001d92:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001d96:	d1c4      	bne.n	8001d22 <__swsetup_r+0x26>
 8001d98:	bd38      	pop	{r3, r4, r5, pc}
 8001d9a:	0781      	lsls	r1, r0, #30
 8001d9c:	bf58      	it	pl
 8001d9e:	6963      	ldrpl	r3, [r4, #20]
 8001da0:	60a3      	str	r3, [r4, #8]
 8001da2:	e7f4      	b.n	8001d8e <__swsetup_r+0x92>
 8001da4:	2000      	movs	r0, #0
 8001da6:	e7f7      	b.n	8001d98 <__swsetup_r+0x9c>
 8001da8:	20000058 	.word	0x20000058

08001dac <memset>:
 8001dac:	4402      	add	r2, r0
 8001dae:	4603      	mov	r3, r0
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d100      	bne.n	8001db6 <memset+0xa>
 8001db4:	4770      	bx	lr
 8001db6:	f803 1b01 	strb.w	r1, [r3], #1
 8001dba:	e7f9      	b.n	8001db0 <memset+0x4>

08001dbc <_close_r>:
 8001dbc:	b538      	push	{r3, r4, r5, lr}
 8001dbe:	4d06      	ldr	r5, [pc, #24]	; (8001dd8 <_close_r+0x1c>)
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	4604      	mov	r4, r0
 8001dc4:	4608      	mov	r0, r1
 8001dc6:	602b      	str	r3, [r5, #0]
 8001dc8:	f7ff fc5b 	bl	8001682 <_close>
 8001dcc:	1c43      	adds	r3, r0, #1
 8001dce:	d102      	bne.n	8001dd6 <_close_r+0x1a>
 8001dd0:	682b      	ldr	r3, [r5, #0]
 8001dd2:	b103      	cbz	r3, 8001dd6 <_close_r+0x1a>
 8001dd4:	6023      	str	r3, [r4, #0]
 8001dd6:	bd38      	pop	{r3, r4, r5, pc}
 8001dd8:	200001c4 	.word	0x200001c4

08001ddc <_lseek_r>:
 8001ddc:	b538      	push	{r3, r4, r5, lr}
 8001dde:	4d07      	ldr	r5, [pc, #28]	; (8001dfc <_lseek_r+0x20>)
 8001de0:	4604      	mov	r4, r0
 8001de2:	4608      	mov	r0, r1
 8001de4:	4611      	mov	r1, r2
 8001de6:	2200      	movs	r2, #0
 8001de8:	602a      	str	r2, [r5, #0]
 8001dea:	461a      	mov	r2, r3
 8001dec:	f7ff fc6d 	bl	80016ca <_lseek>
 8001df0:	1c43      	adds	r3, r0, #1
 8001df2:	d102      	bne.n	8001dfa <_lseek_r+0x1e>
 8001df4:	682b      	ldr	r3, [r5, #0]
 8001df6:	b103      	cbz	r3, 8001dfa <_lseek_r+0x1e>
 8001df8:	6023      	str	r3, [r4, #0]
 8001dfa:	bd38      	pop	{r3, r4, r5, pc}
 8001dfc:	200001c4 	.word	0x200001c4

08001e00 <_read_r>:
 8001e00:	b538      	push	{r3, r4, r5, lr}
 8001e02:	4d07      	ldr	r5, [pc, #28]	; (8001e20 <_read_r+0x20>)
 8001e04:	4604      	mov	r4, r0
 8001e06:	4608      	mov	r0, r1
 8001e08:	4611      	mov	r1, r2
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	602a      	str	r2, [r5, #0]
 8001e0e:	461a      	mov	r2, r3
 8001e10:	f7ff fbfe 	bl	8001610 <_read>
 8001e14:	1c43      	adds	r3, r0, #1
 8001e16:	d102      	bne.n	8001e1e <_read_r+0x1e>
 8001e18:	682b      	ldr	r3, [r5, #0]
 8001e1a:	b103      	cbz	r3, 8001e1e <_read_r+0x1e>
 8001e1c:	6023      	str	r3, [r4, #0]
 8001e1e:	bd38      	pop	{r3, r4, r5, pc}
 8001e20:	200001c4 	.word	0x200001c4

08001e24 <_sbrk_r>:
 8001e24:	b538      	push	{r3, r4, r5, lr}
 8001e26:	4d06      	ldr	r5, [pc, #24]	; (8001e40 <_sbrk_r+0x1c>)
 8001e28:	2300      	movs	r3, #0
 8001e2a:	4604      	mov	r4, r0
 8001e2c:	4608      	mov	r0, r1
 8001e2e:	602b      	str	r3, [r5, #0]
 8001e30:	f7ff fc58 	bl	80016e4 <_sbrk>
 8001e34:	1c43      	adds	r3, r0, #1
 8001e36:	d102      	bne.n	8001e3e <_sbrk_r+0x1a>
 8001e38:	682b      	ldr	r3, [r5, #0]
 8001e3a:	b103      	cbz	r3, 8001e3e <_sbrk_r+0x1a>
 8001e3c:	6023      	str	r3, [r4, #0]
 8001e3e:	bd38      	pop	{r3, r4, r5, pc}
 8001e40:	200001c4 	.word	0x200001c4

08001e44 <_write_r>:
 8001e44:	b538      	push	{r3, r4, r5, lr}
 8001e46:	4d07      	ldr	r5, [pc, #28]	; (8001e64 <_write_r+0x20>)
 8001e48:	4604      	mov	r4, r0
 8001e4a:	4608      	mov	r0, r1
 8001e4c:	4611      	mov	r1, r2
 8001e4e:	2200      	movs	r2, #0
 8001e50:	602a      	str	r2, [r5, #0]
 8001e52:	461a      	mov	r2, r3
 8001e54:	f7ff fbf9 	bl	800164a <_write>
 8001e58:	1c43      	adds	r3, r0, #1
 8001e5a:	d102      	bne.n	8001e62 <_write_r+0x1e>
 8001e5c:	682b      	ldr	r3, [r5, #0]
 8001e5e:	b103      	cbz	r3, 8001e62 <_write_r+0x1e>
 8001e60:	6023      	str	r3, [r4, #0]
 8001e62:	bd38      	pop	{r3, r4, r5, pc}
 8001e64:	200001c4 	.word	0x200001c4

08001e68 <__errno>:
 8001e68:	4b01      	ldr	r3, [pc, #4]	; (8001e70 <__errno+0x8>)
 8001e6a:	6818      	ldr	r0, [r3, #0]
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	20000058 	.word	0x20000058

08001e74 <__libc_init_array>:
 8001e74:	b570      	push	{r4, r5, r6, lr}
 8001e76:	4d0d      	ldr	r5, [pc, #52]	; (8001eac <__libc_init_array+0x38>)
 8001e78:	4c0d      	ldr	r4, [pc, #52]	; (8001eb0 <__libc_init_array+0x3c>)
 8001e7a:	1b64      	subs	r4, r4, r5
 8001e7c:	10a4      	asrs	r4, r4, #2
 8001e7e:	2600      	movs	r6, #0
 8001e80:	42a6      	cmp	r6, r4
 8001e82:	d109      	bne.n	8001e98 <__libc_init_array+0x24>
 8001e84:	4d0b      	ldr	r5, [pc, #44]	; (8001eb4 <__libc_init_array+0x40>)
 8001e86:	4c0c      	ldr	r4, [pc, #48]	; (8001eb8 <__libc_init_array+0x44>)
 8001e88:	f000 f99c 	bl	80021c4 <_init>
 8001e8c:	1b64      	subs	r4, r4, r5
 8001e8e:	10a4      	asrs	r4, r4, #2
 8001e90:	2600      	movs	r6, #0
 8001e92:	42a6      	cmp	r6, r4
 8001e94:	d105      	bne.n	8001ea2 <__libc_init_array+0x2e>
 8001e96:	bd70      	pop	{r4, r5, r6, pc}
 8001e98:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e9c:	4798      	blx	r3
 8001e9e:	3601      	adds	r6, #1
 8001ea0:	e7ee      	b.n	8001e80 <__libc_init_array+0xc>
 8001ea2:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ea6:	4798      	blx	r3
 8001ea8:	3601      	adds	r6, #1
 8001eaa:	e7f2      	b.n	8001e92 <__libc_init_array+0x1e>
 8001eac:	08002290 	.word	0x08002290
 8001eb0:	08002290 	.word	0x08002290
 8001eb4:	08002290 	.word	0x08002290
 8001eb8:	08002294 	.word	0x08002294

08001ebc <__retarget_lock_init_recursive>:
 8001ebc:	4770      	bx	lr

08001ebe <__retarget_lock_acquire_recursive>:
 8001ebe:	4770      	bx	lr

08001ec0 <__retarget_lock_release_recursive>:
 8001ec0:	4770      	bx	lr

08001ec2 <strcpy>:
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001ec8:	f803 2b01 	strb.w	r2, [r3], #1
 8001ecc:	2a00      	cmp	r2, #0
 8001ece:	d1f9      	bne.n	8001ec4 <strcpy+0x2>
 8001ed0:	4770      	bx	lr
	...

08001ed4 <_free_r>:
 8001ed4:	b538      	push	{r3, r4, r5, lr}
 8001ed6:	4605      	mov	r5, r0
 8001ed8:	2900      	cmp	r1, #0
 8001eda:	d041      	beq.n	8001f60 <_free_r+0x8c>
 8001edc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001ee0:	1f0c      	subs	r4, r1, #4
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	bfb8      	it	lt
 8001ee6:	18e4      	addlt	r4, r4, r3
 8001ee8:	f7ff fd04 	bl	80018f4 <__malloc_lock>
 8001eec:	4a1d      	ldr	r2, [pc, #116]	; (8001f64 <_free_r+0x90>)
 8001eee:	6813      	ldr	r3, [r2, #0]
 8001ef0:	b933      	cbnz	r3, 8001f00 <_free_r+0x2c>
 8001ef2:	6063      	str	r3, [r4, #4]
 8001ef4:	6014      	str	r4, [r2, #0]
 8001ef6:	4628      	mov	r0, r5
 8001ef8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001efc:	f7ff bd00 	b.w	8001900 <__malloc_unlock>
 8001f00:	42a3      	cmp	r3, r4
 8001f02:	d908      	bls.n	8001f16 <_free_r+0x42>
 8001f04:	6820      	ldr	r0, [r4, #0]
 8001f06:	1821      	adds	r1, r4, r0
 8001f08:	428b      	cmp	r3, r1
 8001f0a:	bf01      	itttt	eq
 8001f0c:	6819      	ldreq	r1, [r3, #0]
 8001f0e:	685b      	ldreq	r3, [r3, #4]
 8001f10:	1809      	addeq	r1, r1, r0
 8001f12:	6021      	streq	r1, [r4, #0]
 8001f14:	e7ed      	b.n	8001ef2 <_free_r+0x1e>
 8001f16:	461a      	mov	r2, r3
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	b10b      	cbz	r3, 8001f20 <_free_r+0x4c>
 8001f1c:	42a3      	cmp	r3, r4
 8001f1e:	d9fa      	bls.n	8001f16 <_free_r+0x42>
 8001f20:	6811      	ldr	r1, [r2, #0]
 8001f22:	1850      	adds	r0, r2, r1
 8001f24:	42a0      	cmp	r0, r4
 8001f26:	d10b      	bne.n	8001f40 <_free_r+0x6c>
 8001f28:	6820      	ldr	r0, [r4, #0]
 8001f2a:	4401      	add	r1, r0
 8001f2c:	1850      	adds	r0, r2, r1
 8001f2e:	4283      	cmp	r3, r0
 8001f30:	6011      	str	r1, [r2, #0]
 8001f32:	d1e0      	bne.n	8001ef6 <_free_r+0x22>
 8001f34:	6818      	ldr	r0, [r3, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	6053      	str	r3, [r2, #4]
 8001f3a:	4408      	add	r0, r1
 8001f3c:	6010      	str	r0, [r2, #0]
 8001f3e:	e7da      	b.n	8001ef6 <_free_r+0x22>
 8001f40:	d902      	bls.n	8001f48 <_free_r+0x74>
 8001f42:	230c      	movs	r3, #12
 8001f44:	602b      	str	r3, [r5, #0]
 8001f46:	e7d6      	b.n	8001ef6 <_free_r+0x22>
 8001f48:	6820      	ldr	r0, [r4, #0]
 8001f4a:	1821      	adds	r1, r4, r0
 8001f4c:	428b      	cmp	r3, r1
 8001f4e:	bf04      	itt	eq
 8001f50:	6819      	ldreq	r1, [r3, #0]
 8001f52:	685b      	ldreq	r3, [r3, #4]
 8001f54:	6063      	str	r3, [r4, #4]
 8001f56:	bf04      	itt	eq
 8001f58:	1809      	addeq	r1, r1, r0
 8001f5a:	6021      	streq	r1, [r4, #0]
 8001f5c:	6054      	str	r4, [r2, #4]
 8001f5e:	e7ca      	b.n	8001ef6 <_free_r+0x22>
 8001f60:	bd38      	pop	{r3, r4, r5, pc}
 8001f62:	bf00      	nop
 8001f64:	20000080 	.word	0x20000080

08001f68 <__sflush_r>:
 8001f68:	898a      	ldrh	r2, [r1, #12]
 8001f6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f6c:	4605      	mov	r5, r0
 8001f6e:	0710      	lsls	r0, r2, #28
 8001f70:	460c      	mov	r4, r1
 8001f72:	d457      	bmi.n	8002024 <__sflush_r+0xbc>
 8001f74:	684b      	ldr	r3, [r1, #4]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	dc04      	bgt.n	8001f84 <__sflush_r+0x1c>
 8001f7a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	dc01      	bgt.n	8001f84 <__sflush_r+0x1c>
 8001f80:	2000      	movs	r0, #0
 8001f82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001f86:	2e00      	cmp	r6, #0
 8001f88:	d0fa      	beq.n	8001f80 <__sflush_r+0x18>
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001f90:	682f      	ldr	r7, [r5, #0]
 8001f92:	6a21      	ldr	r1, [r4, #32]
 8001f94:	602b      	str	r3, [r5, #0]
 8001f96:	d032      	beq.n	8001ffe <__sflush_r+0x96>
 8001f98:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001f9a:	89a3      	ldrh	r3, [r4, #12]
 8001f9c:	075a      	lsls	r2, r3, #29
 8001f9e:	d505      	bpl.n	8001fac <__sflush_r+0x44>
 8001fa0:	6863      	ldr	r3, [r4, #4]
 8001fa2:	1ac0      	subs	r0, r0, r3
 8001fa4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001fa6:	b10b      	cbz	r3, 8001fac <__sflush_r+0x44>
 8001fa8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001faa:	1ac0      	subs	r0, r0, r3
 8001fac:	2300      	movs	r3, #0
 8001fae:	4602      	mov	r2, r0
 8001fb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001fb2:	6a21      	ldr	r1, [r4, #32]
 8001fb4:	4628      	mov	r0, r5
 8001fb6:	47b0      	blx	r6
 8001fb8:	1c43      	adds	r3, r0, #1
 8001fba:	89a3      	ldrh	r3, [r4, #12]
 8001fbc:	d106      	bne.n	8001fcc <__sflush_r+0x64>
 8001fbe:	6829      	ldr	r1, [r5, #0]
 8001fc0:	291d      	cmp	r1, #29
 8001fc2:	d82b      	bhi.n	800201c <__sflush_r+0xb4>
 8001fc4:	4a28      	ldr	r2, [pc, #160]	; (8002068 <__sflush_r+0x100>)
 8001fc6:	410a      	asrs	r2, r1
 8001fc8:	07d6      	lsls	r6, r2, #31
 8001fca:	d427      	bmi.n	800201c <__sflush_r+0xb4>
 8001fcc:	2200      	movs	r2, #0
 8001fce:	6062      	str	r2, [r4, #4]
 8001fd0:	04d9      	lsls	r1, r3, #19
 8001fd2:	6922      	ldr	r2, [r4, #16]
 8001fd4:	6022      	str	r2, [r4, #0]
 8001fd6:	d504      	bpl.n	8001fe2 <__sflush_r+0x7a>
 8001fd8:	1c42      	adds	r2, r0, #1
 8001fda:	d101      	bne.n	8001fe0 <__sflush_r+0x78>
 8001fdc:	682b      	ldr	r3, [r5, #0]
 8001fde:	b903      	cbnz	r3, 8001fe2 <__sflush_r+0x7a>
 8001fe0:	6560      	str	r0, [r4, #84]	; 0x54
 8001fe2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001fe4:	602f      	str	r7, [r5, #0]
 8001fe6:	2900      	cmp	r1, #0
 8001fe8:	d0ca      	beq.n	8001f80 <__sflush_r+0x18>
 8001fea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001fee:	4299      	cmp	r1, r3
 8001ff0:	d002      	beq.n	8001ff8 <__sflush_r+0x90>
 8001ff2:	4628      	mov	r0, r5
 8001ff4:	f7ff ff6e 	bl	8001ed4 <_free_r>
 8001ff8:	2000      	movs	r0, #0
 8001ffa:	6360      	str	r0, [r4, #52]	; 0x34
 8001ffc:	e7c1      	b.n	8001f82 <__sflush_r+0x1a>
 8001ffe:	2301      	movs	r3, #1
 8002000:	4628      	mov	r0, r5
 8002002:	47b0      	blx	r6
 8002004:	1c41      	adds	r1, r0, #1
 8002006:	d1c8      	bne.n	8001f9a <__sflush_r+0x32>
 8002008:	682b      	ldr	r3, [r5, #0]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d0c5      	beq.n	8001f9a <__sflush_r+0x32>
 800200e:	2b1d      	cmp	r3, #29
 8002010:	d001      	beq.n	8002016 <__sflush_r+0xae>
 8002012:	2b16      	cmp	r3, #22
 8002014:	d101      	bne.n	800201a <__sflush_r+0xb2>
 8002016:	602f      	str	r7, [r5, #0]
 8002018:	e7b2      	b.n	8001f80 <__sflush_r+0x18>
 800201a:	89a3      	ldrh	r3, [r4, #12]
 800201c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002020:	81a3      	strh	r3, [r4, #12]
 8002022:	e7ae      	b.n	8001f82 <__sflush_r+0x1a>
 8002024:	690f      	ldr	r7, [r1, #16]
 8002026:	2f00      	cmp	r7, #0
 8002028:	d0aa      	beq.n	8001f80 <__sflush_r+0x18>
 800202a:	0793      	lsls	r3, r2, #30
 800202c:	680e      	ldr	r6, [r1, #0]
 800202e:	bf08      	it	eq
 8002030:	694b      	ldreq	r3, [r1, #20]
 8002032:	600f      	str	r7, [r1, #0]
 8002034:	bf18      	it	ne
 8002036:	2300      	movne	r3, #0
 8002038:	1bf6      	subs	r6, r6, r7
 800203a:	608b      	str	r3, [r1, #8]
 800203c:	2e00      	cmp	r6, #0
 800203e:	dd9f      	ble.n	8001f80 <__sflush_r+0x18>
 8002040:	6a21      	ldr	r1, [r4, #32]
 8002042:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002046:	4633      	mov	r3, r6
 8002048:	463a      	mov	r2, r7
 800204a:	4628      	mov	r0, r5
 800204c:	47e0      	blx	ip
 800204e:	2800      	cmp	r0, #0
 8002050:	dc06      	bgt.n	8002060 <__sflush_r+0xf8>
 8002052:	89a3      	ldrh	r3, [r4, #12]
 8002054:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002058:	81a3      	strh	r3, [r4, #12]
 800205a:	f04f 30ff 	mov.w	r0, #4294967295
 800205e:	e790      	b.n	8001f82 <__sflush_r+0x1a>
 8002060:	4407      	add	r7, r0
 8002062:	1a36      	subs	r6, r6, r0
 8002064:	e7ea      	b.n	800203c <__sflush_r+0xd4>
 8002066:	bf00      	nop
 8002068:	dfbffffe 	.word	0xdfbffffe

0800206c <_fflush_r>:
 800206c:	b538      	push	{r3, r4, r5, lr}
 800206e:	690b      	ldr	r3, [r1, #16]
 8002070:	4605      	mov	r5, r0
 8002072:	460c      	mov	r4, r1
 8002074:	b913      	cbnz	r3, 800207c <_fflush_r+0x10>
 8002076:	2500      	movs	r5, #0
 8002078:	4628      	mov	r0, r5
 800207a:	bd38      	pop	{r3, r4, r5, pc}
 800207c:	b118      	cbz	r0, 8002086 <_fflush_r+0x1a>
 800207e:	6a03      	ldr	r3, [r0, #32]
 8002080:	b90b      	cbnz	r3, 8002086 <_fflush_r+0x1a>
 8002082:	f7ff fccf 	bl	8001a24 <__sinit>
 8002086:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d0f3      	beq.n	8002076 <_fflush_r+0xa>
 800208e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002090:	07d0      	lsls	r0, r2, #31
 8002092:	d404      	bmi.n	800209e <_fflush_r+0x32>
 8002094:	0599      	lsls	r1, r3, #22
 8002096:	d402      	bmi.n	800209e <_fflush_r+0x32>
 8002098:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800209a:	f7ff ff10 	bl	8001ebe <__retarget_lock_acquire_recursive>
 800209e:	4628      	mov	r0, r5
 80020a0:	4621      	mov	r1, r4
 80020a2:	f7ff ff61 	bl	8001f68 <__sflush_r>
 80020a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80020a8:	07da      	lsls	r2, r3, #31
 80020aa:	4605      	mov	r5, r0
 80020ac:	d4e4      	bmi.n	8002078 <_fflush_r+0xc>
 80020ae:	89a3      	ldrh	r3, [r4, #12]
 80020b0:	059b      	lsls	r3, r3, #22
 80020b2:	d4e1      	bmi.n	8002078 <_fflush_r+0xc>
 80020b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80020b6:	f7ff ff03 	bl	8001ec0 <__retarget_lock_release_recursive>
 80020ba:	e7dd      	b.n	8002078 <_fflush_r+0xc>

080020bc <__swhatbuf_r>:
 80020bc:	b570      	push	{r4, r5, r6, lr}
 80020be:	460c      	mov	r4, r1
 80020c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020c4:	2900      	cmp	r1, #0
 80020c6:	b096      	sub	sp, #88	; 0x58
 80020c8:	4615      	mov	r5, r2
 80020ca:	461e      	mov	r6, r3
 80020cc:	da0d      	bge.n	80020ea <__swhatbuf_r+0x2e>
 80020ce:	89a3      	ldrh	r3, [r4, #12]
 80020d0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80020d4:	f04f 0100 	mov.w	r1, #0
 80020d8:	bf0c      	ite	eq
 80020da:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80020de:	2340      	movne	r3, #64	; 0x40
 80020e0:	2000      	movs	r0, #0
 80020e2:	6031      	str	r1, [r6, #0]
 80020e4:	602b      	str	r3, [r5, #0]
 80020e6:	b016      	add	sp, #88	; 0x58
 80020e8:	bd70      	pop	{r4, r5, r6, pc}
 80020ea:	466a      	mov	r2, sp
 80020ec:	f000 f848 	bl	8002180 <_fstat_r>
 80020f0:	2800      	cmp	r0, #0
 80020f2:	dbec      	blt.n	80020ce <__swhatbuf_r+0x12>
 80020f4:	9901      	ldr	r1, [sp, #4]
 80020f6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80020fa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80020fe:	4259      	negs	r1, r3
 8002100:	4159      	adcs	r1, r3
 8002102:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002106:	e7eb      	b.n	80020e0 <__swhatbuf_r+0x24>

08002108 <__smakebuf_r>:
 8002108:	898b      	ldrh	r3, [r1, #12]
 800210a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800210c:	079d      	lsls	r5, r3, #30
 800210e:	4606      	mov	r6, r0
 8002110:	460c      	mov	r4, r1
 8002112:	d507      	bpl.n	8002124 <__smakebuf_r+0x1c>
 8002114:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002118:	6023      	str	r3, [r4, #0]
 800211a:	6123      	str	r3, [r4, #16]
 800211c:	2301      	movs	r3, #1
 800211e:	6163      	str	r3, [r4, #20]
 8002120:	b002      	add	sp, #8
 8002122:	bd70      	pop	{r4, r5, r6, pc}
 8002124:	ab01      	add	r3, sp, #4
 8002126:	466a      	mov	r2, sp
 8002128:	f7ff ffc8 	bl	80020bc <__swhatbuf_r>
 800212c:	9900      	ldr	r1, [sp, #0]
 800212e:	4605      	mov	r5, r0
 8002130:	4630      	mov	r0, r6
 8002132:	f7ff fb5f 	bl	80017f4 <_malloc_r>
 8002136:	b948      	cbnz	r0, 800214c <__smakebuf_r+0x44>
 8002138:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800213c:	059a      	lsls	r2, r3, #22
 800213e:	d4ef      	bmi.n	8002120 <__smakebuf_r+0x18>
 8002140:	f023 0303 	bic.w	r3, r3, #3
 8002144:	f043 0302 	orr.w	r3, r3, #2
 8002148:	81a3      	strh	r3, [r4, #12]
 800214a:	e7e3      	b.n	8002114 <__smakebuf_r+0xc>
 800214c:	89a3      	ldrh	r3, [r4, #12]
 800214e:	6020      	str	r0, [r4, #0]
 8002150:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002154:	81a3      	strh	r3, [r4, #12]
 8002156:	9b00      	ldr	r3, [sp, #0]
 8002158:	6163      	str	r3, [r4, #20]
 800215a:	9b01      	ldr	r3, [sp, #4]
 800215c:	6120      	str	r0, [r4, #16]
 800215e:	b15b      	cbz	r3, 8002178 <__smakebuf_r+0x70>
 8002160:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002164:	4630      	mov	r0, r6
 8002166:	f000 f81d 	bl	80021a4 <_isatty_r>
 800216a:	b128      	cbz	r0, 8002178 <__smakebuf_r+0x70>
 800216c:	89a3      	ldrh	r3, [r4, #12]
 800216e:	f023 0303 	bic.w	r3, r3, #3
 8002172:	f043 0301 	orr.w	r3, r3, #1
 8002176:	81a3      	strh	r3, [r4, #12]
 8002178:	89a3      	ldrh	r3, [r4, #12]
 800217a:	431d      	orrs	r5, r3
 800217c:	81a5      	strh	r5, [r4, #12]
 800217e:	e7cf      	b.n	8002120 <__smakebuf_r+0x18>

08002180 <_fstat_r>:
 8002180:	b538      	push	{r3, r4, r5, lr}
 8002182:	4d07      	ldr	r5, [pc, #28]	; (80021a0 <_fstat_r+0x20>)
 8002184:	2300      	movs	r3, #0
 8002186:	4604      	mov	r4, r0
 8002188:	4608      	mov	r0, r1
 800218a:	4611      	mov	r1, r2
 800218c:	602b      	str	r3, [r5, #0]
 800218e:	f7ff fa83 	bl	8001698 <_fstat>
 8002192:	1c43      	adds	r3, r0, #1
 8002194:	d102      	bne.n	800219c <_fstat_r+0x1c>
 8002196:	682b      	ldr	r3, [r5, #0]
 8002198:	b103      	cbz	r3, 800219c <_fstat_r+0x1c>
 800219a:	6023      	str	r3, [r4, #0]
 800219c:	bd38      	pop	{r3, r4, r5, pc}
 800219e:	bf00      	nop
 80021a0:	200001c4 	.word	0x200001c4

080021a4 <_isatty_r>:
 80021a4:	b538      	push	{r3, r4, r5, lr}
 80021a6:	4d06      	ldr	r5, [pc, #24]	; (80021c0 <_isatty_r+0x1c>)
 80021a8:	2300      	movs	r3, #0
 80021aa:	4604      	mov	r4, r0
 80021ac:	4608      	mov	r0, r1
 80021ae:	602b      	str	r3, [r5, #0]
 80021b0:	f7ff fa81 	bl	80016b6 <_isatty>
 80021b4:	1c43      	adds	r3, r0, #1
 80021b6:	d102      	bne.n	80021be <_isatty_r+0x1a>
 80021b8:	682b      	ldr	r3, [r5, #0]
 80021ba:	b103      	cbz	r3, 80021be <_isatty_r+0x1a>
 80021bc:	6023      	str	r3, [r4, #0]
 80021be:	bd38      	pop	{r3, r4, r5, pc}
 80021c0:	200001c4 	.word	0x200001c4

080021c4 <_init>:
 80021c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021c6:	bf00      	nop
 80021c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021ca:	bc08      	pop	{r3}
 80021cc:	469e      	mov	lr, r3
 80021ce:	4770      	bx	lr

080021d0 <_fini>:
 80021d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021d2:	bf00      	nop
 80021d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021d6:	bc08      	pop	{r3}
 80021d8:	469e      	mov	lr, r3
 80021da:	4770      	bx	lr
